,fname,text
0,m.app introduction readme ,"m.app introduction readme .   Introduction - Phantom Developer Docs   Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API Reference⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookIntroductionPhantom is a crypto wallet that can be used to manage digital assets and access decentralized applications on Solana, Polygon, and Ethereum. Phantom is currently available as:A browser extension​An iOS app​An Android app​At its core, Phantom works by creating and managing private keys on behalf of its users. These keys can then be used within Phantom to store funds and sign transactions. Developers can interact with Phantom via both web applications as well as iOS and Android applications.To interact with web applications, the Phantom extension and mobile in-app browser injects a phantom object into the javascript context of every site the user visits. A given web app may then interact with Phantom, and ask for the user's permission to perform transactions, through this injected provider.It's also possible to interact with the Phantom mobile app through universal links and deeplinks. With deeplinks, mobile apps can prompt their users to connect, sign, and send with Phantom directly. Once complete, Phantom will redirect users back to their referring applications.This documentation is intended for developers who are building applications with Phantom. If you are a developer looking for help with an integration, please check out our developer discord. For all other support requests, please visit our Help Center.​Next - IntroductionDeveloper SettingsLast modified 2mo agoCopy link "
1,m.app introduction developer settings,"m.app introduction developer settings.   Developer Settings - Phantom Developer Docs   Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API Reference⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookDeveloper SettingsDevelopers can can configure the following settings on Phantom's extension or mobile apps:​Preferred Explorer​​Testnet Mode​Preferred ExplorerDevelopers can choose the default block explorers for all the three chains that are currently supported by Phantom: Solana, Ethereum and Polygon. The following options can be chosen:Solana​Solana Beach​​Solscan (Default)​Solana Explorer​​Solana FM​Ethereum​Etherscan​Polygon​Polygonscan​Testnet ModeDevelopers can configure the following testnets in testnet mode:SolanaSolana TestnetSolana DevnetEthereum and PolygonEthereum GoerliPolygon MumbaiIntroduction - PreviousIntroductionNext - SolanaGetting Started With SolanaLast modified 1mo agoCopy linkOn this pagePreferred ExplorerTestnet Mode "
2,m.app solana sending a transaction 1,"m.app solana sending a transaction 1.   Sending a Versioned Transaction - Phantom Developer Docs    Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API Reference⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookSending a Versioned TransactionOn October 10, 2022, Solana introduced the concept of Versioned Transactions. Currently, the Solana runtime supports two types of transactions: legacy (see Sending a Legacy Transaction) and v0 (transactions that can include Address Lookup Tables (LUTS)).The goal of v0 is to increase the maximum size of a transaction, and hence the number of accounts that can fit in a single atomic transaction. With LUTs, developers can now build transactions with a maximum of 256 accounts, as compared to the limit of 35 accounts in legacy transactions that do not utilize LUTs.For a dive deep on Versioned Transactions, LUTs, and how the above changes affect the anatomy of a transaction, you can read this detailed guide.On this page, we'll go over the following:1.Building a Versioned Transaction2.Signing and Sending a Versioned Transaction3.Building an Address Lookup Table (LUT)4.Extending an Address Lookup Table (LUT)5.Signing and Sending a Versioned Transaction utilising a LUTBuilding a Versioned TransactionVersioned transactions are built in a very similar fashion to legacy transactions. The only difference is that developers should use the VersionedTransaction class rather than the Transaction class.The following example show how to build a simple transfer instruction. Once the transfer instruction is made, a MessageV0 formatted transaction message is constructed with the transfer instruction. Finally, a new VersionedTransaction is created, parsing in the v0 compatible message.createTransactionV0()// create array of instructionsconst instructions = [ SystemProgram.transfer({ fromPubkey: publicKey, toPubkey: publicKey, lamports: 10, }),];​// create v0 compatible messageconst messageV0 = new TransactionMessage({ payerKey: publicKey, recentBlockhash: blockhash, instructions,}).compileToV0Message();​// make a versioned transactionconst transactionV0 = new VersionedTransaction(messageV0);Check out the createTransferTransactionV0() function in our code sandbox for a live example of creating a versioned transaction.Signing and Sending a Versioned TransactionOnce a Versioned transaction is created, it can be signed and sent via Phantom using the signAndSendTransaction method on the provider. The call will return a Promise for an object containing the signature. This is the same way a legacy transaction is sent via the Phantom provider.signAndSendTransaction()const provider = getProvider(); // see ""Detecting the Provider""const network = ""<NETWORK_URL>"";const connection = new Connection(network);const versionedTransaction = new VersionedTransaction();const { signature } = await provider.signAndSendTransaction(versionedTransaction);await connection.getSignatureStatus(signature);You can also specify a SendOptions object as a second argument into signAndSendTransaction() or as an options parameter when using request.For a live demo of signing and sending a Versioned transaction, please refer to the handleSignAndSendTransactionV0() section of our developer sandbox.Building an Address Lookup Table (LUT)Address Lookup Tables (LUTs) can be used to load accounts into table-like data structures. These structures can then be referenced to significantly increase the number of accounts that can be loaded in a single transaction.This lookup method effectively ""compresses"" a 32-byte address into a 1-byte index value. This ""compression"" enables storing up to 256 address in a single lookup table for use inside any given transaction.With the @solana/web3.js createLookupTable function, developers can construct the instruction needed to create a new lookup table, as well as determine its address. Once we have the lookup table instruction, we can construct a transaction, sign it, and send it to create a lookup table on-chain. Address lookup tables can be created with either a v0 transaction or a legacy transaction. However, the Solana runtime can only retrieve and handle the additional addresses within a lookup table while using v0 transactions.Here's a code snippet that creates a Lookup Table.createAddressLookupTable()// create an Address Lookup Tableconst [lookupTableInst, lookupTableAddress] = AddressLookupTableProgram.createLookupTable({ authority: publicKey, payer: publicKey, recentSlot: slot,});​// To create the Address Lookup Table on chain:// send the `lookupTableInst` instruction in a transactionconst lookupMessage = new TransactionMessage({ payerKey: publicKey, recentBlockhash: blockhash, instructions: [lookupTableInst],}).compileToV0Message();​const lookupTransaction = new VersionedTransaction(lookupMessage);const lookupSignature = await signAndSendTransaction(provider, lookupTransaction);Please refer to the handleSignAndSendTransactionV0WithLookupTable() in our code sandbox for a live demo of creating a lookup table.Extending an Address Lookup Table (LUT)Once an Address Lookup Table is created, it can then be extended (i.e. accounts can be appended to the table). Using the @solana/web3.js library, you can create a new extend instruction using the extendLookupTable method. Once the extend instruction is created, it can be sent in a transaction.extendAddressLookupTable()// add addresses to the `lookupTableAddress` table via an `extend` instructionconst extendInstruction = AddressLookupTableProgram.extendLookupTable({ payer: publicKey, authority: publicKey, lookupTable: lookupTableAddress, addresses: [ publicKey, SystemProgram.programId, // more `publicKey` addresses can be listed here ],});​// Send this `extendInstruction` in a transaction to the cluster// to insert the listing of `addresses` into your lookup table with address `lookupTableAddress`const extensionMessageV0 = new TransactionMessage({ payerKey: publicKey, recentBlockhash: blockhash, instructions: [extendInstruction],}).compileToV0Message();​const extensionTransactionV0 = new VersionedTransaction(extensionMessageV0);const extensionSignature = await signAndSendTransaction(provider, extensionTransactionV0);Please refer to the handleSignAndSendTransactionV0WithLookupTable() in our code sandbox for a live demo of extending a lookup table.Signing and Sending a Versioned Transaction utilizing a LUTUp until now, we have:1.Learned how to create a VersionedTransaction2.Created an Address Lookup Table3.Extended the Address Lookup TableAt this point, we are now ready to sign and send a VersionedTransaction utilizing an Address Lookup Table.First, we need to fetch the account of the created Address Lookup Table.getAddressLookupTable()// get the table from the clusterconst lookupTableAccount = await connection.getAddressLookupTable(lookupTableAddress).then((res) => res.value);// `lookupTableAccount` will now be a `AddressLookupTableAccount` objectconsole.log('Table address from cluster:', lookupTableAccount.key.toBase58());We can also parse and read all the addresses currently stores in the fetched Address Lookup Table.Parse and Read addresses// Loop through and parse all the address stored in the tablefor (let i = 0; i < lookupTableAccount.state.addresses.length; i++) { const address = lookupTableAccount.state.addresses[i]; console.log(i, address.toBase58());}We can now create the instructions array with an arbitrary transfer instruction, just the way we did while creating the VersionedTransaction earlier. This VersionedTransaction can then be sent using the signAndSendTransaction() provider function.Untitled// create an array with your desired `instructions`// in this case, just a transfer instructionconst instructions = [ SystemProgram.transfer({ fromPubkey: publicKey, toPubkey: publicKey, lamports: minRent, }),];​// create v0 compatible messageconst messageV0 = new TransactionMessage({ payerKey: publicKey, recentBlockhash: blockhash, instructions,}).compileToV0Message([lookupTableAccount]);​// make a versioned transactionconst transactionV0 = new VersionedTransaction(messageV0);const signature = await signAndSendTransaction(provider, transactionV0);Please refer to the handleSignAndSendTransactionV0WithLookupTable() in our code sandbox for a live demo of signing and sending a versioned transaction utilizing an Address Lookup Table.Solana - PreviousSending a Legacy TransactionNext - SolanaSigning a MessageLast modified 5mo agoCopy linkOn this pageBuilding a Versioned TransactionSigning and Sending a Versioned TransactionBuilding an Address Lookup Table (LUT)Extending an Address Lookup Table (LUT)Signing and Sending a Versioned Transaction utilizing a LUT "
3,m.app library integrations wagmi,"m.app library integrations wagmi.   wagmi - Phantom Developer Docs    Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API Reference⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookwagmiThis tutorial is a step-by-step guide on how to integrate a wallet such as Phantom into your dApp using the wagmi library. wagmi is a collection of React Hooks containing everything you need to start working with Ethereum. wagmi makes it easy to ""Connect Wallet,"" display ENS and balance information, sign messages, interact with contracts, and generally facilitate programmatic on-chain activity.We will be going through step by step how to go from 0 to a fully integrated wagmi button. If you already have a dApp that you are trying to integrate Phantom in, you can use our project as reference.PrerequisitesNode version >=16.12.0A text editor/IDE (such as VSCode)Some Knowledge of ReactCreating The AppWe recommend using Vite to create new react applications.To create a new React application using Vite, run the following command in your terminal:yarn create vite1.This will ask you for a project name. Provide it a name here. For purposes of this tutorial I used ""wagmi-sandbox"".2.It will then ask you to select a framework. Select ""React"" here.3.Next it will ask for a variant. Select ""Typescript"" here.Now change directory into your project and run:yarn installAnd make sure your app runs by running the command:yarn devConfiguring TypeScriptYou will need to change the moduleResolution keys to be switched from ""bundler"" to ""node"".Each file should look as follows.tsconfig.jsontsconfig.node.json{ ""compilerOptions"": { ""target"": ""ESNext"", ""lib"": [""DOM"", ""DOM.Iterable"", ""ESNext""], ""module"": ""ESNext"", ""skipLibCheck"": true, ""moduleResolution"": ""node"", ""resolveJsonModule"": true, ""isolatedModules"": true, ""noEmit"": true, ""allowSyntheticDefaultImports"": true, ""jsx"": ""react-jsx"",​ /* Linting */ ""strict"": true, ""noUnusedLocals"": true, ""noUnusedParameters"": true, ""noFallthroughCasesInSwitch"": true }, ""include"": [""src""], ""references"": [{ ""path"": ""./tsconfig.node.json"" }]}​{ ""compilerOptions"": { ""composite"": true, ""skipLibCheck"": true, ""module"": ""ESNext"", ""moduleResolution"": ""node"", ""allowSyntheticDefaultImports"": true }, ""include"": [""vite.config.ts""]}With that out of the way we can install all of our dependencies.Installing wagmiTo install the appropriate package, run the following:yarn add wagmi viem phantom-wagmi-connectorNow you can use the wagmi package in your project and integrate a Phantom connection button into your app.Initializing WagmiFirst we will need to import the packages into our project. At the top of the main.tsx file add these imports:import { configureChains, createConfig, WagmiConfig,} from 'wagmi';import { publicProvider } from 'wagmi/providers/public';import { PhantomConnector } from 'phantom-wagmi-connector';import { goerli } from 'wagmi/chains'Next, we will configure wagmi like so.// =============================================================================// wagmi configuration// =============================================================================// initalize which chains your dapp will use, and set up a providerconst { publicClient, webSocketPublicClient, chains } = configureChains([goerli], [publicProvider()]);​const wagmiConfig = createConfig({ publicClient, webSocketPublicClient, connectors: [ new PhantomConnector({ chains }), ]});Here we configure what chains we will support in our dApp, as well as the client that wagmi requires to interface with the blockchain.Then we set up our connectors. This is all of the wallets that you want your dApp to support. You can have as many connectors as you would like in this array. But for example purposes we're just using the PhantomConnector that we imported from phantom-wagmi-connector.With this bit of prep done, we can now go to our app and wrap it in the <WagmiConfig> component.Wrapping Your App In WagmiConfigIn main.tsx wrap your <App />component with the providers. Your file should look like this with all of the configuration and wrapping completed.import React from 'react'import ReactDOM from 'react-dom/client'import App from './App'import './index.css'​import { configureChains, createConfig, WagmiConfig,} from 'wagmi';import { publicProvider } from 'wagmi/providers/public';import { PhantomConnector } from 'phantom-wagmi-connector';import { goerli } from 'wagmi/chains'​​// =============================================================================// wagmi configuration// =============================================================================// initalize which chains your dapp will use, and set up a providerconst { publicClient, webSocketPublicClient, chains } = configureChains([goerli], [publicProvider()]);​const wagmiConfig = createConfig({ publicClient, webSocketPublicClient, connectors: [ new PhantomConnector({ chains }), ]});​ReactDOM.createRoot(document.getElementById('root') as HTMLElement).render( <React.StrictMode> <WagmiConfig config={wagmiConfig}> <App /> </WagmiConfig> </React.StrictMode>,)Now we have everything we need done to add a connect wallet button to the app.Adding A Connect ButtonAt the top of your App.tsx file you can import the useConnect hook from wagmi. We will also display the address once connected, so we will import the useAccount hook as well. We also want to make sure we're connecting to Goerli, so we will import the chain as well.import { useAccount, useConnect } from 'wagmi';import { goerli } from 'wagmi/chains';Then inside our App component, we will need to call the hooks. You can replace the useState hook that is keeping track of the counter with the following// WHAT IS THERE RIGHT NOWconst [count, setCount] = useState(0)// REPLACE WITHconst { address } = useAccount();const { connect, connectors, isLoading, pendingConnector } = useConnect();Next, you can add this connect button in place of the counter button that is there by default.//REPLACE THIS<button onClick={() => setCount((count) => count + 1)}> count is {count}</button>// WITH THIS {connectors.map((connector) => ( <Button disabled={!connector.ready} key={connector.id} onClick={() => connect({ connector, chainId: goerli.id })}> Connect to {connector.name} {isLoading && pendingConnector?.id === connector.id && ' (connecting)'} </Button> ))} <p>Connected to: {address ? address : 'not connected yet'}</p>Then delete the useState import as we don't need it anymore.Your entire App.tsx file should look like soimport reactLogo from ""./assets/react.svg"";import viteLogo from ""/vite.svg"";import ""./App.css"";import { useAccount, useConnect } from ""wagmi"";import { goerli } from 'wagmi/chains';​function App() { const { address } = useAccount(); const { connect, connectors, isLoading, pendingConnector } = useConnect(); return ( <> <div> <a href=""https://vitejs.dev"" target=""_blank""> <img src={viteLogo} className=""logo"" alt=""Vite logo"" /> </a> <a href=""https://react.dev"" target=""_blank""> <img src={reactLogo} className=""logo react"" alt=""React logo"" /> </a> </div> <h1>Vite + React</h1> <div className=""card""> {connectors.map((connector) => ( <button disabled={!connector.ready} key={connector.id} onClick={() => connect({ connector, chainId: goerli.id })} >   Connect to {connector.name} {isLoading &&    pendingConnector?.id === connector.id && "" (connecting)""} </button> ))} <p>Connected to: {address ? address : ""not connected yet""}</p> <p>   Edit <code>src/App.tsx</code> and save to test HMR </p> </div> <p className=""read-the-docs"">  Click on the Vite and React logos to learn more </p> </> );}​export default App;​Now when you run everything locally it should look like this!Once you click the connect button, it will prompt you to connect with Phantom, and then look like the picture below. Be sure to enable testnet mode, otherwise, you will encounter an error when trying to connect.Conclusionwagmi lets you easily manage a bunch of different web3 primitives through their typesafe hooks, and as you can see adding a connect button is very straightforward with just a bit of configuration up front.Now that you've connected through wagmi and done all of the necessary config, you can use the other wagmi hooks to do things like sign messages, and send transactions. To see what a more advanced app might look like, you can look at the code for our sandbox for wagmi. And you can also check out the functionality here for a live demo.We hope that you enjoyed this guide!Library Integrations - PreviousRainbowKitNext - Library IntegrationsWeb3-OnboardLast modified 11d agoCopy linkOn this pagePrerequisitesCreating The AppConfiguring TypeScriptInstalling wagmiInitializing WagmiWrapping Your App In WagmiConfigAdding A Connect ButtonConclusion "
4,m.app solana integrating phantom,"m.app solana integrating phantom.   Getting Started With Solana - Phantom Developer Docs   Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API Reference⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookGetting Started With SolanaThe Phantom browser extension and mobile in-app browser are both designed to interact with web applications. For mobile apps, we recommend integrating via universal links or deeplinks.There are two main ways to integrate Phantom into your web application:Direct IntegrationThe most direct way to interact with Phantom is via the provider that Phantom injects into your web application. This provider is globally available at window.phantom and its methods will always include Phantom's most up-to-date functionality. This documentation is dedicated to covering all aspects of the provider.Solana Wallet AdapterAnother quick and easy way to get up and running with Phantom is via the Solana Wallet Adapter package. The wallet adapter is a set of modular TypeScript components that allow developers to easily integrate multiple Solana wallets into their applications. This package includes starter files, setup and usage instructions, and a live demo showcasing multiple UI frameworks.Introduction - PreviousDeveloper SettingsNext - SolanaDetecting the ProviderLast modified 1mo agoCopy linkOn this pageDirect IntegrationSolana Wallet Adapter "
5,m.app phantom deeplinks limitations,m.app phantom deeplinks limitations.   Limitations - Phantom Developer Docs   Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API Reference⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookLimitationsAndroidAndroid has a 500kb Transaction limit when passing data between services and apps. The requesting app may crash with a TransactionTooLarge exception when requesting a string >500kb (over 31k characters). This tends to happen with significantly large intents.iOSiOS is not known to have a 500kb transaction and allows transmissions up to 1 MB.Phantom Deeplinks - PreviousEncryptionNext - Library IntegrationsDynamicLast modified 1yr agoCopy linkOn this pageAndroidiOS 
6,m.app phantom deeplinks specifying redirects,"m.app phantom deeplinks specifying redirects.   Specifying Redirects - Phantom Developer Docs   Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API Reference⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookSpecifying RedirectsAll Methods support a redirect_link= param that lets Phantom know how to get back to the original app. The URI specified by this param should be URL encoded. The following is an example for a mydapp://onPhantomConnected redirect URI:redirect_link%3Dmydapp%3A%2F%2FonPhantomConnectedIf the deeplink request to Phantom comes with a response, Phantom will append the results as query parameters in the redirect_link= upon redirecting.redirect_link=mydapp://onPhantomConnected?data=...Phantom Deeplinks - PreviousHandling SessionsNext - Phantom DeeplinksEncryptionLast modified 1yr agoCopy link "
7,m.app phantom deeplinks deeplinks ios and android,"m.app phantom deeplinks deeplinks ios and android.   Phantom Deeplinks - Phantom Developer Docs   Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API Reference⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookPhantom DeeplinksAs of Phantom v22.04.11, iOS and Android apps can now natively interact with Phantom through either universal links (recommended) or deeplinks. We refer to both of these workflows collectively as ""deeplinks"".Currently only Solana is supported for deeplinks.All Provider Methods follow a protocol format of:https://phantom.app/ul/<version>/<method>It is also possible (but not recommended) to call these methods using Phantom's custom protocol handler:phantom://<version>/<method>In addition to these provider methods, Phantom also supports Other Methods that are accessible via deeplinks. Specifically, users can open web apps within Phantom's in-app browser via the Browse deeplink.PreviousError Messages & CodesNext - Phantom DeeplinksProvider MethodsLast modified 2mo agoCopy link "
8,m.app ethereum and polygon provider api reference errors,"m.app ethereum and polygon provider api reference errors.   Error Messages & Codes - Phantom Developer Docs   Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API ReferencePropertiesEventsMethodsError Messages & Codes⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookError Messages & CodesWhen making requests to Phantom in Establishing a Connection, Sending a Transaction, or Signing a Message, Phantom may respond with an error. The following is a list of all possible error codes and their meanings. These error messages follow EIP-1474 and EIP-1193. CodeTitleDescription4900DisconnectedPhantom could not connect to the network.4100UnauthorizedThe requested method and/or account has not been authorized by the user.4001User Rejected RequestThe user rejected the request through Phantom.-32000Invalid InputMissing or invalid parameters.-32002Requested resource not availableThis error occurs when a dapp attempts to submit a new transaction while Phantom's approval dialog is already open for a previous transaction. Only one approve window can be open at a time. Users should approve or reject their transaction before initiating a new transaction.-32003Transaction RejectedPhantom does not recognize a valid transaction.-32601Method Not FoundPhantom does not recognize the method.-32603Internal ErrorSomething went wrong within Phantom.PreviousrequestNext - Phantom DeeplinksPhantom DeeplinksLast modified 6mo agoCopy link "
9,m.app ethereum and polygon provider api reference properties,"m.app ethereum and polygon provider api reference properties.   Properties - Phantom Developer Docs   Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API ReferencePropertiesisPhantomchainIdnetworkVersionselectedAddress_events_eventsCountEventsMethodsError Messages & Codes⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookPropertiesHere you will find a list of all of the properties available to you once the window.phantom.ethereum object has been injected. These are all exactly the same as the window.ethereum object. However, we recommend using the window.phantom.ethereum object to prevent namespace collisions.{ chainId: HexString networkVersion: String selectedAddress: HexString _events: Object _eventsCount: Number}Ethereum & Polygon - PreviousProvider API ReferenceNextisPhantomLast modified 3mo agoCopy link "
10,m.app ethereum and polygon provider api reference properties networkversion,"m.app ethereum and polygon provider api reference properties networkversion.   networkVersion - Phantom Developer Docs    Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API ReferencePropertiesisPhantomchainIdnetworkVersionselectedAddress_events_eventsCountEventsMethodsError Messages & Codes⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBooknetworkVersionwindow.ethereum.networkVersionThe network number of the blockchain that you are connected to. This property is available for legacy purposes. It is recommended that modern dapps refer to the chainId property to determine what chain a user is connected to currently.const networkVersion = window.phantom.ethereum.networkVersion;console.log(networkVersion);// ""1""// Ethereum Mainnet's Network VersionPreviouschainIdNextselectedAddressLast modified 1mo agoCopy link "
11,m.app ethereum and polygon provider api reference properties  events,"m.app ethereum and polygon provider api reference properties  events.   _events - Phantom Developer Docs    Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API ReferencePropertiesisPhantomchainIdnetworkVersionselectedAddress_events_eventsCountEventsMethodsError Messages & Codes⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBook_eventswindow.phantom.ethereum._eventsAn object containing all of the events that the provider has emitted or logged.const events = window.phantom.ethereum._events;console.log(events);// Events {chainChanged: Array(2), accountsChanged: EE}This is not a recommended way to keep track of different events. The provider implements a Node.js EventEmitter API to emit different events happening within the wallet and/or dapp. See Events for more details.PreviousselectedAddressNext_eventsCountLast modified 3mo agoCopy link "
12,m.app ethereum and polygon provider api reference properties selectedaddress,"m.app ethereum and polygon provider api reference properties selectedaddress.   selectedAddress - Phantom Developer Docs    Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API ReferencePropertiesisPhantomchainIdnetworkVersionselectedAddress_events_eventsCountEventsMethodsError Messages & Codes⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookselectedAddresswindow.phantom.ethereum.selectedAddressThe address of the wallet that is currently connected to the dapp. This value will update upon accountsChanged and connect events. Returns a hexadecimal string.const address = window.phantom.ethereum.selectedAddress;console.log(address);// ""0xDAFEA492D9c6733ae3d56b7Ed1ADB60692c98Bc5""PreviousnetworkVersionNext_eventsLast modified 1mo agoCopy link "
13,m.app ethereum and polygon provider api reference events connect,"m.app ethereum and polygon provider api reference events connect.   Connect - Phantom Developer Docs   Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API ReferencePropertiesEventsConnectAccounts ChangedDisconnectChain ChangedMethodsError Messages & Codes⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookConnectEvent emitted upon connecting to a dapp.interface connectionInfo { chainId: string;}​window.ethereum.on('connect', (connectionInfo: connectionInfo) => { console.log(connectionInfo.chainId); // ""0x1"" On Ethereum});You can see an example of hooking into this event in our sandbox.PreviousEventsNextAccounts ChangedLast modified 3mo agoCopy link "
14,m.app ethereum and polygon provider api reference events disconnect,"m.app ethereum and polygon provider api reference events disconnect.   Disconnect - Phantom Developer Docs   Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API ReferencePropertiesEventsConnectAccounts ChangedDisconnectChain ChangedMethodsError Messages & Codes⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookDisconnectEvent emitted upon the wallet losing connection to the RPC provider.This is not a user ""disconnecting"" from a dapp, or otherwise revoking access between the dapp and the wallet. window.ethereum.on('disconnect', () => { console.log('lost connection to the rpc)});You can see an example of hooking into this event in our sandbox.PreviousAccounts ChangedNextChain ChangedLast modified 6mo agoCopy link "
15,m.app ethereum and polygon provider api reference events chain changed,"m.app ethereum and polygon provider api reference events chain changed.   Chain Changed - Phantom Developer Docs   Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API ReferencePropertiesEventsConnectAccounts ChangedDisconnectChain ChangedMethodsError Messages & Codes⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookChain ChangedEvent emitted upon the dapp or wallet changing the network/chain you are connected toPhantom abstracts the concept of networks, and network switching. So there is no action required on your end as a dapp developer.ethereum.on('chainChanged', (chainId: string) => { console.log(chainId); // ""0x1"" on Ethereum /* Phantom will handle all of the internal changes needed to handle the new chain. * As the dapp developer, * you just need to make sure all of your transaction requests * populate the correct chainId */});PreviousDisconnectNextMethodsLast modified 3mo agoCopy link "
16,m.app ethereum and polygon provider api reference events accounts changed,"m.app ethereum and polygon provider api reference events accounts changed.   Accounts Changed - Phantom Developer Docs   Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API ReferencePropertiesEventsConnectAccounts ChangedDisconnectChain ChangedMethodsError Messages & Codes⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookAccounts ChangedEvent emitted upon changing accounts within your Phantom wallet.window.ethereum.on('accountsChanged', (newAccounts: String[]) => { // ""newAccounts"" will always be an array, but it can be empty.  if (newAccounts) { console.log(`switched to new account: ${newAccounts}`);  accounts = newAccounts; } else { /**   * In this case dApps could...   *   * 1. Not do anything   * 2. Only re-connect to the new account if it is trusted   *   * ```   * provider.send('eth_requestAccounts', []).catch((err) => {   * // fail silently   * });   * ```   *   * 3. Always attempt to reconnect   */ }})You can see an example of hooking into this event in our sandbox.PreviousConnectNextDisconnectLast modified 6mo agoCopy link "
17,m.app ethereum and polygon provider api reference properties chainid,"m.app ethereum and polygon provider api reference properties chainid.   chainId - Phantom Developer Docs    Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API ReferencePropertiesisPhantomchainIdnetworkVersionselectedAddress_events_eventsCountEventsMethodsError Messages & Codes⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookchainIdwindow.phantom.ethereum.chainIdThe chainId of the network you are currently connected to, returned as a hexadecimal string.const chainId = window.phantom.ethereum.chainId;console.log(chainId);// ""0x1""// hexidecimal representation of Ethereum MainnetPreviousisPhantomNextnetworkVersionLast modified 1mo agoCopy link "
18,m.app ethereum and polygon provider api reference properties  eventscount,m.app ethereum and polygon provider api reference properties  eventscount.   _eventsCount - Phantom Developer Docs    Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API ReferencePropertiesisPhantomchainIdnetworkVersionselectedAddress_events_eventsCountEventsMethodsError Messages & Codes⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBook_eventsCountwindow.phantom.ethereum._eventsCountAn object containing the number of events that have happenedconst eventsCount = window.phantom.ethereum._eventsCount;console.log(eventsCount);// 2This is not a recommended way to keep track of different events. The provider implements a Node.js EventEmitter API to emit different events happening within the wallet and/or dapp. Previous_eventsNextEventsLast modified 3mo agoCopy link 
19,m.app ethereum and polygon provider api reference properties isphantom,m.app ethereum and polygon provider api reference properties isphantom.   isPhantom - Phantom Developer Docs    Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API ReferencePropertiesisPhantomchainIdnetworkVersionselectedAddress_events_eventsCountEventsMethodsError Messages & Codes⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookisPhantomwindow.phantom.ethereum.isPhantomA boolean that identifies if Phantom is installed.const isPhantomInstalled = window.phantom?.ethereum?.isPhantom;console.log(isPhantomInstalled);// truePreviousPropertiesNextchainIdLast modified 3mo agoCopy link 
20,m.app ethereum and polygon provider api reference events,"m.app ethereum and polygon provider api reference events.   Events - Phantom Developer Docs   Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API ReferencePropertiesEventsConnectAccounts ChangedDisconnectChain ChangedMethodsError Messages & Codes⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookEventsPhantom's provider API available at window.ethereum implements a Node.js style EventEmitter API, that allows you to hook into different events that are emitted upon certain actions that take place in either the dapp, or the wallet. Each page in this section will be an isolated piece of information that informs you of all the technical details you need to know about each event Phantom supports.Previous_eventsCountNextConnectLast modified 6mo agoCopy link "
21,m.app ethereum and polygon provider api reference methods,"m.app ethereum and polygon provider api reference methods.   Methods - Phantom Developer Docs   Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API ReferencePropertiesEventsMethodsisConnectedrequestError Messages & Codes⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookMethodsIn the following pages you will find information about the individual methods that are available to you through Phantom's window.phantom.ethereum object. As a dapp developer, you will use these methods to programmatically interact with the wallet. From sending requests to/from the blockchain, to connecting to your website — these methods will help you interact with your users.PreviousChain ChangedNextisConnectedLast modified 3mo agoCopy link "
22,m.app ethereum and polygon provider api reference methods isconnected,m.app ethereum and polygon provider api reference methods isconnected.   isConnected - Phantom Developer Docs   Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API ReferencePropertiesEventsMethodsisConnectedrequestError Messages & Codes⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookisConnectedChecks if the wallet is connected to the dappParameters: NoneReturns: Booleanwindow.phantom.ethereum.isConnected()// true if connected// false if notPreviousMethodsNextrequestLast modified 3mo agoCopy link 
23,m.app ethereum and polygon provider api reference methods request,"m.app ethereum and polygon provider api reference methods request.   request - Phantom Developer Docs    Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API ReferencePropertiesEventsMethodsisConnectedrequestError Messages & Codes⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookrequestSends a JSON RPC request to the walletParams: method: string; params?: unknown[] | object;Returns: Promise<unknown>Example:const accounts = await window.phantom.ethereum.request({ method: ""eth_requestAccounts"", params: [] })console.log(accounts)// [""0xDAFEA492D9c6733ae3d56b7Ed1ADB60692c98Bc5""]The code above demonstrates how you can use the request method to ask the user to connect to your dapp. The request method is the go to way for you to interface with the wallet in your dapp. It accepts most JSON RPC requests that would need to interact with the wallet. However it will not work for methods that don't make sense for a wallet. E.g. you can't use the provider object Phantom injects to call something like eth_getTransactionByHash. If you send a method that the provider object does not support, it will throw an error. You can see a list of errors, and the shape that they will take on this page.PreviousisConnectedNextError Messages & CodesLast modified 3mo agoCopy link "
24,m.app phantom deeplinks other methods browse,"m.app phantom deeplinks other methods browse.   Browse - Phantom Developer Docs   Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API Reference⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsOther MethodsBrowseHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookBrowseDeeplinks provide a convenient way for users to open web apps within Phantom. Using their phone’s camera, users can scan a QR code to open a page directly within Phantom’s in-app browser. If a web app detects that a user is on mobile, it can also prompt the user to open a specific page within Phantom's in-app browser.The browse deeplink can be used before a Connect event takes places, as it does not require a session param. Please review Extension & Mobile Browser for more information on how apps can interact with Phantom from within the in-app browser.browse deeplinks are not intended to be pasted into mobile web browsers. These deeplinks must either be handled by an app or clicked on by an end user.URL Structurehttps://phantom.app/ul/browse/<url>?ref=<ref>Parametersurl (required): The URL that should open within Phantom's in-app browser, URL-encoded.ref (required): The URL of the requesting app, URL-encodedThe following is an example request to open an NFT listed on Magic Eden:https://phantom.app/ul/browse/https%3A%2F%2Fmagiceden.io%2Fitem-details%2FED8Psf2Zk2HyVGAimSQpFHVDFRGDAkPjQhkfAqbN5h7d?ref=https%3A%2F%2Fmagiceden.ioResult: browse deeplink to NFT listed on Magic Eden​Phantom Deeplinks - PreviousOther MethodsNext - Phantom DeeplinksHandling SessionsLast modified 8mo agoCopy linkOn this pageURL StructureParameters "
25,m.app phantom deeplinks provider methods connect,"m.app phantom deeplinks provider methods connect.   Connect - Phantom Developer Docs   Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API Reference⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsConnectDisconnectSignAndSendTransactionSignAllTransactionsSignTransactionSignMessageOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookConnectIn order to start interacting with Phantom, an app must first establish a connection. This connection request will prompt the user for permission to share their public key, indicating that they are willing to interact further.Once a user connects to Phantom, Phantom will return a session param that should be used on all subsequent methods. For more information on sessions, please review Handling Sessions.Base URLhttps://phantom.app/ul/v1/connectQuery String Parametersapp_url (required): A url used to fetch app metadata (i.e. title, icon) using the same properties found in Displaying Your App. URL-encoded.dapp_encryption_public_key (required): A public key used for end-to-end encryption. This will be used to generate a shared secret. For more information on how Phantom handles shared secrets, please review Encryption. redirect_link (required): The URI where Phantom should redirect the user upon connection. Please review Specifying Redirects for more details. URL-encoded.cluster (optional): The network that should be used for subsequent interactions. Can be either: mainnet-beta, testnet, or devnet. Defaults to mainnet-beta.Returns​✅ Approvephantom_encryption_public_key: An encryption public key used by Phantom for the construction of a shared secret between the connecting app and Phantom, encoded in base58.nonce: A nonce used for encrypting the response, encoded in base58.data: An encrypted JSON string. Refer to Encryption to learn how apps can decrypt data using a shared secret. Encrypted bytes are encoded in base58.// content of decrypted `data`-parameter{ // base58 encoding of user public key ""public_key"": ""BSFtCudCd4pR4LSFqWPjbtXPKSNVbGkc35gRNdnqjMCU"",​ // session token for subsequent signatures and messages // dapps should send this with any other deeplinks after connect ""session"": ""...""}public_key: The public key of the user, represented as a base58-encoded string.session: A string encoded in base58. This should be treated as opaque by the connecting app, as it only needs to be passed alongside other parameters. Sessions do not expire. For more information on sessions, please review Handling Sessions.​❌RejectAn errorCode and errorMessage as query parameters. Please refer to Errors for a full list of possible error codes.{ ""errorCode"": ""..."", ""errorMessage"": ""...""}ExamplePlease refer to the connect method implemented in our React Native demo application.Phantom Deeplinks - PreviousProvider MethodsNextDisconnectLast modified 11mo agoCopy linkOn this pageBase URLQuery String ParametersReturnsExample "
26,m.app phantom deeplinks provider methods signalltransactions,"m.app phantom deeplinks provider methods signalltransactions.   SignAllTransactions - Phantom Developer Docs   Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API Reference⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsConnectDisconnectSignAndSendTransactionSignAllTransactionsSignTransactionSignMessageOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookSignAllTransactionsOnce an app is connected, it is also possible to sign multiple transactions at once. Unlike SignAndSendTransaction, Phantom will not submit these transactions to the network. Applications can submit signed transactions using web3.js's sendRawTransaction. Base URLhttps://phantom.app/ul/v1/signAllTransactionsQuery String Parametersdapp_encryption_public_key (required): The original encryption public key used from the app side for an existing Connect session.nonce (required): A nonce used for encrypting the request, encoded in base58.redirect_link (required): The URI where Phantom should redirect the user upon completion. Please review Specifying Redirects for more details. URL-encoded.payload (required): An encrypted JSON string with the following fields:{ ""transactions"": [ ""..."", // serialized transaction, bs58-encoded ""..."", // serialized transaction, bs58-encoded ], ""session"": ""..."", // token received from connect-method}transactions (required): An array of transactions that Phantom will sign, serialized and encoded in base58.session (required): The session token received from the Connect method. Please see Handling Sessions for more details.Returns​✅ Approvenonce: A nonce used for encrypting the response, encoded in base58.data: An encrypted JSON string. Refer to Encryption to learn how apps can decrypt data using a shared secret. Encrypted bytes are encoded in base58.// content of decrypted `data`-parameter{ transactions: [ ""..."", // signed serialized transaction, bs58-encoded ""..."", // signed serialized transaction, bs58-encoded ] }transactions: An array of signed, serialized transactions that are base58 encoded. Phantom will not submit these transactions. Applications can submit these transactions themselves via web3.js's sendRawTransaction. ​❌RejectAn errorCode and errorMessage as query parameters. Please refer to Errors for a full list of possible error codes.{ ""errorCode"": ""..."", ""errorMessage"": ""...""}ExamplePlease refer to the signAllTransactions method implemented in our React Native demo application.PreviousSignAndSendTransactionNextSignTransactionLast modified 11mo agoCopy linkOn this pageBase URLQuery String ParametersReturnsExample "
27,m.app phantom deeplinks provider methods signtransaction,"m.app phantom deeplinks provider methods signtransaction.   SignTransaction - Phantom Developer Docs   Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API Reference⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsConnectDisconnectSignAndSendTransactionSignAllTransactionsSignTransactionSignMessageOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookSignTransactionThe easiest and most recommended way to send a transaction is via SignAndSendTransaction. It is safer for users, and a simpler API for developers, for Phantom to submit the transaction immediately after signing it instead of relying on the application to do so.However, it is also possible for an app to request just the signature from Phantom. Once signed, an app can submit the transaction itself using web3.js's sendRawTransaction. Base URLhttps://phantom.app/ul/v1/signTransactionQuery String Parametersdapp_encryption_public_key (required): The original encryption public key used from the app side for an existing Connect session.nonce (required): A nonce used for encrypting the request, encoded in base58.redirect_link (required): The URI where Phantom should redirect the user upon completion. Please review Specifying Redirects for more details. URL-encoded.payload (required): An encrypted JSON string with the following fields:{ ""transaction"": ""..."", // serialized transaction, base58 encoded ""session"": ""..."", // token received from connect-method}transaction (required): The transaction that Phantom will sign, serialized and encoded in base58.session (required): The session token received from the Connect method. Please see Handling Sessions for more details.Returns​✅ Approvenonce: A nonce used for encrypting the response, encoded in base58.data: An encrypted JSON string. Refer to Encryption to learn how apps can decrypt data using a shared secret. Encrypted bytes are encoded in base58.// content of decrypted `data`-parameter{ transaction: ""..."", // signed serialized transaction, base58 encoded}transaction: The signed, serialized transaction that is base58 encoded. Phantom will not submit this transactions. An application can submit this transactions itself via web3.js's sendRawTransaction.​❌RejectAn errorCode and errorMessage as query parameters. Please refer to Errors for a full list of possible error codes.{ ""errorCode"": ""..."", ""errorMessage"": ""...""}ExamplePlease refer to the signTransaction method implemented in our React Native demo application.PreviousSignAllTransactionsNextSignMessageLast modified 9mo agoCopy linkOn this pageBase URLQuery String ParametersReturnsExample "
28,m.app phantom deeplinks provider methods signandsendtransaction,"m.app phantom deeplinks provider methods signandsendtransaction.   SignAndSendTransaction - Phantom Developer Docs   Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API Reference⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsConnectDisconnectSignAndSendTransactionSignAllTransactionsSignTransactionSignMessageOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookSignAndSendTransactionOnce an application is connected to Phantom, it can prompt the user for permission to send transactions on their behalf.In order to send a transaction, an application must:1.Create an unsigned transaction.2.Have the transaction be signed and submitted to the network by the user's Phantom wallet.3.Optionally await network confirmation using a Solana JSON RPC connection.For more information about the nature of Solana transactions, please review the solana-web3.js docs as well as the Solana Cookbook.For a sample transaction using Phantom deeplinks, check out our deeplinking demo app.Base URLhttps://phantom.app/ul/v1/signAndSendTransactionQuery String Parametersdapp_encryption_public_key (required): The original encryption public key used from the app side for an existing Connect session.nonce (required): A nonce used for encrypting the request, encoded in base58.redirect_link (required): The URI where Phantom should redirect the user upon completion. Please review Specifying Redirects for more details. URL-encoded.payload (required): An encrypted JSON string with the following fields:{ ""transaction"": ""..."", // serialized transaction, base58-encoded ""sendOptions"": ""..."" // an optional Solana web3.js sendOptions object ""session"": ""..."", // token received from the connect method}transaction (required): The transaction that Phantom will sign and submit, serialized and encoded in base58.sendOptions (optional): An optional object that specifies options for how Phantom should submit the transaction. This object is defined in Solana web3.js.session (required): The session token received from the Connect method. Please see Handling Sessions for more details.Returns​✅ Approvenonce: A nonce used for encrypting the response, encoded in base58.data: An encrypted JSON string. Refer to Encryption to learn how apps can decrypt data using a shared secret. Encrypted bytes are encoded in base58.// content of decrypted `data`-parameter{ ""signature"": ""..."" // transaction-signature}signature: The first signature in the transaction, which can be used as its transaction id.​❌RejectAn errorCode and errorMessage as query parameters. Please refer to Errors for a full list of possible error codes.{ ""errorCode"": ""..."", ""errorMessage"": ""...""}ExamplePlease refer to the signAndSendTransaction method implemented in our React Native demo application.PreviousDisconnectNextSignAllTransactionsLast modified 8mo agoCopy linkOn this pageBase URLQuery String ParametersReturnsExample "
29,m.app resources sandbox#deeplinking demo app,"m.app resources sandbox#deeplinking demo app.   Demo Applications - Phantom Developer Docs   Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API Reference⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookDemo ApplicationsMultichain SandboxFor a live example of how a multichain dApp can integrate with Phantom, check out our Multichain Sandbox on CodeSandbox and GitHub.The Phantom Multichain SandboxSolana-only SandboxFor a live example of a Solana-only integration, check out our Solana Sandbox on CodeSandbox and GitHub.The Phantom SandboxDeeplinking Demo AppFor a live demonstration of Phantom's deeplinking API, please review our React Native demo app on GitHub. This application can be run locally and interacted with on iOS and Android devices via Expo CLI. A connect request to Magic Eden, initiated via a deeplinkResources - PreviousFAQNext - ResourcesCommunity Guides & SDKsLast modified 2mo agoCopy linkOn this pageMultichain SandboxSolana-only SandboxDeeplinking Demo App "
30,m.app phantom deeplinks provider methods disconnect,"m.app phantom deeplinks provider methods disconnect.   Disconnect - Phantom Developer Docs   Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API Reference⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsConnectDisconnectSignAndSendTransactionSignAllTransactionsSignTransactionSignMessageOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookDisconnectAfter an initial Connect event has taken place, an app may disconnect from Phantom at anytime. Once disconnected, Phantom will reject all signature requests until another connection is established.Base URLhttps://phantom.app/ul/v1/disconnectQuery String Parametersdapp_encryption_public_key (required): The original encryption public key used from the app side for an existing Connect session.nonce (required): A nonce used for encrypting the request, encoded in base58.redirect_link (required): The URI where Phantom should redirect the user upon completion. Please review Specifying Redirects for more details. URL-encoded.payload (required): An encrypted JSON string with the following fields:{ ""session"": ""..."", // token received from the connect method}session (required): The session token received from the Connect method. Please see Handling Sessions for more details.Returns​✅ ApproveNo query params returned.​❌RejectAn errorCode and errorMessage as query parameters. Please refer to Errors for a full list of possible error codes.{ ""errorCode"": ""..."", ""errorMessage"": ""...""}ExamplePlease refer to the disconnect method implemented in our React Native demo application.PreviousConnectNextSignAndSendTransactionLast modified 11mo agoCopy linkOn this pageBase URLQuery String ParametersReturnsExample "
31,m.app phantom deeplinks provider methods signmessage,"m.app phantom deeplinks provider methods signmessage.   SignMessage - Phantom Developer Docs   Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API Reference⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsConnectDisconnectSignAndSendTransactionSignAllTransactionsSignTransactionSignMessageOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookSignMessageOnce it's connected to Phantom, an app can request that the user signs a given message. Applications are free to write their own messages which will be displayed to users from within Phantom's signature prompt. Message signatures do not involve network fees and are a convenient way for apps to verify ownership of an address.In order to send a message for the user to sign, an application must: 1.Provide a hex or UTF-8 encoded string as a Uint8Array and then base58-encoded it.2.Request that the encoded message is signed via the user's Phantom wallet.The deeplinking demo app provides an example of signing a message.For more information on how to verify the signature of a message, please refer to Encryption Resources.Base URLhttps://phantom.app/ul/v1/signMessageQuery String Parametersdapp_encryption_public_key (required): The original encryption public key used from the app side for an existing Connect session.nonce (required): A nonce used for encrypting the request, encoded in base58.redirect_link (required): The URI where Phantom should redirect the user upon completion. Please review Specifying Redirects for more details. URL-encoded.payload (required): An encrypted JSON string with the following fields:{ ""message"": ""..."", // the message, base58 encoded ""session"": ""..."", // token received from connect-method ""display"": ""utf8"" | ""hex"", // the encoding to use when displaying the message }message (required): The message that should be signed by the user, encoded in base58. Phantom will display this message to the user when they are prompted to sign.session (required): The session token received from the Connect method. Please see Handling Sessions for more details.display (optional): How you want us to display the string to the user. Defaults to utf8Returns​✅ Approvenonce: A nonce used for encrypting the response, encoded in base58.data: An encrypted JSON string. Refer to Encryption to learn how apps can decrypt data using a shared secret. Encrypted bytes are encoded in base58.// content of decrypted `data`-parameter{ signature: ""..."", // message-signature}signature: The message signature, encoded in base58. For more information on how to verify the signature of a message, please refer to Encryption Resources.​❌RejectAn errorCode and errorMessage as query parameters. Please refer to Errors for a full list of possible error codes.{ ""errorCode"": ""..."", ""errorMessage"": ""...""}ExamplePlease refer to the signMessage method implemented in our React Native demo application.PreviousSignTransactionNext - Phantom DeeplinksOther MethodsLast modified 11mo agoCopy linkOn this pageBase URLQuery String ParametersReturnsExample "
32,m.app phantom deeplinks encryption#encryption resources,"m.app phantom deeplinks encryption#encryption resources.   Encryption - Phantom Developer Docs   Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API Reference⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookEncryptionDeeplinks are encrypted using symmetric key encryption generated from a Diffie-Hellman key exchange. While deeplink sessions will be created in plaintext, an encrypted channel will be created to prevent session tokens from getting hijacked.Encryption & Decryption WorkflowPhantom deeplinks are encrypted with the following workflows:Connect1.[dapp]: On the initial connect deeplink, dapps should include a dapp_encryption_public_key query parameter. It's recommended to create a new x25519 keypair for every session started with connect. In all methods, the public key for this keypair is referred to as dapp_encryption_public_key.2.[phantom]: Upon handling a connect deeplink, Phantom will also generate a new x25519 keypair.Phantom will return this public key as phantom_encryption_public_key in the connect response.Phantom will create a secret key using Diffie-Hellman with dapp_encryption_public_key and the private key associated with phantom_encryption_public_key.Phantom will locally store a mapping of dapp_encryption_public_key to shared secrets for use with decryption in subsequent deeplinks.3.[dapp]: Upon receiving the connect response, the dapp should create a shared secret by using Diffie-Hellman with phantom_encryption_public_key and the private key associated with dapp_encryption_public_key. This shared secret should then be used to decrypt the data field in the response. If done correctly, the user's public key will be available to share with the dapp inside the data JSON object.Subsequent Deeplinks1.[dapp]: For any subsequent methods (such as SignAndSendTransaction and SignMessage), dapps should send a dapp_encryption_public_key (the public key side of the shared secret) used with Phantom along with an encrypted payload object. 2.[phantom]: Upon approval, Phantom will encrypt the signed response as a JSON object with the encryption sent as a data= query param.3.[dapp]: Upon receiving the deeplink response, dapps should decrypt the object in the data= query param to view the signature.Encryption ResourcesTo learn more about encryption and decryption, please refer to the following libraries:JavaScript​TweetNaCl.js​iOS​TweetNaCl SwiftWrap​Android​Tink​​TweetNaCl Java​Phantom Deeplinks - PreviousSpecifying RedirectsNext - Phantom DeeplinksLimitationsLast modified 1yr agoCopy linkOn this pageEncryption & Decryption WorkflowEncryption Resources "
33,m.app developer powertools wallet standard,"m.app developer powertools wallet standard.   Wallet Standard - Phantom Developer Docs   Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API Reference⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookWallet StandardIntroduction​Wallet Standard is a chain-agnostic set of interfaces and conventions that aim to improve how applications interact with injected wallets such as Phantom. The standard was pioneered on Solana and is used as the foundation for the Solana Wallet Adapter. Phantom supports the Wallet Standard and is open to working with others to bring this innovation to other ecosystems.MotivationMost desktop wallets today come in the form of browser extensions. These extensions interact with dApps by injecting code in the form of a provider into every website the user visits. There are several issues with the way injection works today:Issue #1: Interferences Between Multiple Injected WalletsWhile wallets often injected into their own designated namespace (e.g. window.phantom), there is nothing stopping another wallet from injecting into the same namespace. Furthermore, any wallet can attempt to mimic another by changing its identifier flags (e.g. window.solana.isPhantom = true). As a result, users who have multiple injected wallets can often experience unwanted interferences.Issue #2: Lack of Automatic dApp SupportSince wallets attach themselves to the window as global objects, dApps need to be made aware of how they can find these objects. Instead of automatically detecting all wallets that the user has installed, a dApp must choose to support a limited number of wallets that may not be relevant to the user.Issue #3: Lack of Standardized Feature SupportWallets inconsistently support features such as signing and sending transactions, signing more than one transaction, signing a ""message"" (arbitrary byte array), and encryption and decryption. To the extent they support these features, wallets may have different interfaces which can make integrations complex and time consuming.Wallet-Standard OverviewWallet Standard addresses these issues by introducing an event-based model that1.Standardizes the way wallets attach themselves to the window2.Defines a set of standard APIs that dApps can rely uponAt a high-level, Wallet Standard defines the following Window interface for events:export interface WalletEventsWindow extends Omit<Window, 'addEventListener' | 'dispatchEvent'> { /** Add a listener for {@link WindowAppReadyEvent}. */ addEventListener(type: WindowAppReadyEventType, listener: (event: WindowAppReadyEvent) => void): void; /** Add a listener for {@link WindowRegisterWalletEvent}. */ addEventListener(type: WindowRegisterWalletEventType, listener: (event: WindowRegisterWalletEvent) => void): void; /** Dispatch a {@link WindowAppReadyEvent}. */ dispatchEvent(event: WindowAppReadyEvent): void; /** Dispatch a {@link WindowRegisterWalletEvent}. */ dispatchEvent(event: WindowRegisterWalletEvent): void;}When a wallet is ready to inject into a website, it will dispatch a register-wallet event and listen for an app-ready event. Conversely, an app will dispatch an app-ready event and listen for register-wallet events.Features of Wallet StandardAvoids Code BloatBefore Wallet Standard, if a dApp wanted to support 20 wallets, it had to load 5kb of code per wallet (100k total). This bloating increases linearly as the number of wallets increase. The vast majority of this code goes unused, as the user will only use one or two wallets.Wallet Standard turns this inside out: If dapps want to support 100 wallets, they just to support Wallet Standard. Any wallet that supports the standard is will automatically be detected and supported. Implementations are replaced with interfaces.Eliminates Attack SurfacesBefore Wallet Standard, every new wallet had to land a PR in a library such as the Solana Wallet Adapter. Library maintainers had to vet hundreds of PRs to ensure they weren't introducing malware into the adapter. By eliminating plugins, these libraries can now eliminate attack surfaces.Multichain By DefaultWhile Wallet Standard was pioneered on Solana, it is chain-agnostic by default. An example EIP-1193 implementation can be found here.No web3.js DependencyWallet Standard will always input and output transactions, pubkeys, and signatures as raw bytes (Uint8Array). As such, there are no dependencies for web3.js .For dApp DevelopersPhantom comes with built-in support for Wallet Standard on Solana. To get started, simply update the Solana Wallet Adapter to the latest release. For a demo, check out the Wallet Adapter Example.BREAKING CHANGE: If you are migrating an existing Solana dApp to use Wallet Standard, please ensure that you are not mutating transactions in place. Failure to do will result in a breaking change. For more information, please see the below threads.Further Readingwallet-standard/DESIGN.md at master · wallet-standard/wallet-standardGitHubDeveloper Powertools - PreviousSolana Versioned TransactionsNext - Best PracticesDisplaying Apps within the Activity TabLast modified 21d agoCopy linkOn this pageIntroductionMotivationWallet-Standard OverviewFeatures of Wallet StandardFor dApp DevelopersFurther Reading "
34,m.app library integrations privy,"m.app library integrations privy.   Privy - Phantom Developer Docs    Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API Reference⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookPrivy​Privy is a simple toolkit for progressive authentication in web3. With a single library, you can easily onboard both expert users and newcomers alike, through Privy's powerful wallet connectors and delightful embedded wallets.Privy makes it easy to integrate every major wallet into your app without having to wrangle the connectors individually. You can check out Privy in action here.Privy comes pre-packaged with Phantom so you can support your Phantom users right out of the box. Here’s how.PrerequisitesThe Privy React Auth SDK allows you to authenticate your users with Privy in your React app in minutes. You can follow the standard guide here.Building a new app? Check out these starter templates for integrating Privy into:a NextJS project (GitHub, CodeSandbox)a Create React App project (GitHub, CodeSandbox)1. Get a Privy accountRequest access to Privy and get keys in minutes. Retrieve your Privy app ID from the developer console at console.privy.io​2. Install the Privy npm packageInstall the Privy React Auth SDK using npm:npm install @privy-io/react-auth3. Configure PrivyOnce you have your app ID, in your React project, wrap your components with a PrivyProvider. The PrivyProvider should wrap any component that will use the Privy SDK.If you're starting from scratch, we recommend using one of these templates to integrate Privy:a NextJS project (GitHub, CodeSandbox)a Create React App project (GitHub, CodeSandbox) For example, in a NextJS or Create React App project, you may wrap your components like so:NextJSCreate React Appimport type {AppProps} from 'next/app';import Head from 'next/head';import {PrivyProvider} from '@privy-io/react-auth';​// This method will be passed to the PrivyProvider as a callback// that runs after successful login.const handleLogin = (user) => { console.log(`User ${user.id} logged in!`)}​function MyApp({Component, pageProps}: AppProps) { return ( <> <Head> {/* Edit your HTML header */} </Head> <PrivyProvider appId={process.env.NEXT_PUBLIC_PRIVY_APP_ID} onSuccess={handleLogin} > <Component {...pageProps} /> </PrivyProvider> </> );}import React from 'react';import ReactDOM from 'react-dom/client';import './index.css';import App from './App';import reportWebVitals from './reportWebVitals';import {PrivyProvider} from '@privy-io/react-auth';​const root = ReactDOM.createRoot(document.getElementById('root'));​// This method will be passed to the PrivyProvider as a callback// that runs after successful login.const handleLogin = (user) => { console.log(`User ${user.id} logged in!`)}​root.render( <React.StrictMode> <PrivyProvider appId={process.env.REACT_APP_PRIVY_APP_ID} onSuccess={handleLogin} > <App /> </PrivyProvider> </React.StrictMode>);​// See https://docs.privy.io/guide/troubleshooting/webpack for how to handle// common build issues with web3 projects bootstrapped with Create React AppThe PrivyProvider takes the following properties:your appIdan optional onSuccess callback which will execute once a user successfully logs inan optional config property to customize the look and feel of the Privy modal to match your app4. Just usePrivy! 🎉You can now use the Privy SDK throughout your app via the usePrivy hook with Phantom working right out of the box.Check it out liveSee Privy run live in a CodeSandbox environment and check out the starter repo for more reference.Next Steps​Customize Privy to match your brand and explore how your users are connecting to your app.From here, you can easily use Privy to:​Log your users in.​Prompt users to link additional accounts, as part of progressive onboarding.​Interface with users' crypto wallets.Manage your user base with simple allowlists and powerful analytics.​Create Ethereum wallets embedded in your app. Library Integrations - PreviousDynamicNext - Library IntegrationsRainbowKitLast modified 25d agoCopy link "
35,m.app introduction developer settings#testnet mode,"m.app introduction developer settings#testnet mode.   Developer Settings - Phantom Developer Docs   Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API Reference⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookDeveloper SettingsDevelopers can can configure the following settings on Phantom's extension or mobile apps:​Preferred Explorer​​Testnet Mode​Preferred ExplorerDevelopers can choose the default block explorers for all the three chains that are currently supported by Phantom: Solana, Ethereum and Polygon. The following options can be chosen:Solana​Solana Beach​​Solscan (Default)​Solana Explorer​​Solana FM​Ethereum​Etherscan​Polygon​Polygonscan​Testnet ModeDevelopers can configure the following testnets in testnet mode:SolanaSolana TestnetSolana DevnetEthereum and PolygonEthereum GoerliPolygon MumbaiIntroduction - PreviousIntroductionNext - SolanaGetting Started With SolanaLast modified 1mo agoCopy linkOn this pagePreferred ExplorerTestnet Mode "
36,m.app solana errors,"m.app solana errors.   Error Messages and Codes - Phantom Developer Docs    Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API Reference⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookError Messages and CodesWhen making requests to Phantom in Establishing a Connection, Sending a Transaction, or Signing a Message, Phantom may respond with an error. The following is a list of all possible error codes and their meanings. These error messages are inspired by Ethereum's EIP-1474 and EIP-1193.CodeTitleDescription4900DisconnectedPhantom could not connect to the network.4100UnauthorizedThe requested method and/or account has not been authorized by the user.4001User Rejected RequestThe user rejected the request through Phantom.-32000Invalid InputMissing or invalid parameters.-32002Requested resource not availableThis error occurs when a dapp attempts to submit a new transaction while Phantom's approval dialog is already open for a previous transaction. Only one approve window can be open at a time. Users should approve or reject their transaction before initiating a new transaction.-32003Transaction RejectedPhantom does not recognize a valid transaction.-32601Method Not FoundPhantom does not recognize the method.-32603Internal ErrorSomething went wrong within Phantom.Typically, these errors will be easily parseable and have both a code and an explanation. For example:try { await window.solana.signMessage();} catch (err) { // {code: 4100, message: 'The requested method and/or account has not been authorized by the user.'}}Solana - PreviousSigning a MessageNext - Ethereum & PolygonGetting Started with Ethereum and PolygonLast modified 2mo agoCopy link "
37,m.app phantom deeplinks other methods,"m.app phantom deeplinks other methods.   Other Methods - Phantom Developer Docs   Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API Reference⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsOther MethodsBrowseHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookOther MethodsIn addition to its Provider Methods, Phantom also supports other methods that are accessible via deeplinks. Specifically, users can open web apps within Phantom's in-app browser via the Browse deeplink.PreviousSignMessageNextBrowseLast modified 1yr agoCopy link "
38,m.app introduction developer settings#preferred explorer,"m.app introduction developer settings#preferred explorer.   Developer Settings - Phantom Developer Docs   Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API Reference⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookDeveloper SettingsDevelopers can can configure the following settings on Phantom's extension or mobile apps:​Preferred Explorer​​Testnet Mode​Preferred ExplorerDevelopers can choose the default block explorers for all the three chains that are currently supported by Phantom: Solana, Ethereum and Polygon. The following options can be chosen:Solana​Solana Beach​​Solscan (Default)​Solana Explorer​​Solana FM​Ethereum​Etherscan​Polygon​Polygonscan​Testnet ModeDevelopers can configure the following testnets in testnet mode:SolanaSolana TestnetSolana DevnetEthereum and PolygonEthereum GoerliPolygon MumbaiIntroduction - PreviousIntroductionNext - SolanaGetting Started With SolanaLast modified 1mo agoCopy linkOn this pagePreferred ExplorerTestnet Mode "
39,m.app phantom deeplinks handling sessions,"m.app phantom deeplinks handling sessions.   Handling Sessions - Phantom Developer Docs    Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API Reference⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookHandling SessionsWhen a user connects to Phantom for the first time, Phantom will return a session param that represents the user's connection. The app should pass this session param back to Phantom on all subsequent Provider Methods. It is the app's responsibility to store this session.Sessions do not expire. Once a user has connected with Phantom, the corresponding app can indefinitely make requests such as SignAndSendTransaction and SignMessage without prompting the user to re-connect with Phantom. Apps will still need to re-connect to Phantom after a Disconnect event or an Invalid Session.Session StructureThe entire session param is encoded in base58. A session should contain the following data:JSON Data Signature: A base58 signature of the JSON data that is 64 bytes. Phantom will check the signature against the actual message that was signed.JSON Data: A JSON object with the following fields:app_url (string): A url used to fetch app metadata (i.e. title, icon) using the same properties found in Displaying Your App.timestamp (number): The timestamp at which the user approved the connection. At the time of this writing, sessions do not expire.chain (string): The chain that the user connected to at the start of the session. Sessions cannot be used across two different chains with the same keypair (e.g. the user cannot connect to Solana and then sign on Ethereum). At the time of this writing, Phantom only supports solana.cluster (string) (optional): The approved cluster that the app and user initially connected to. Solana-only. Can be either: mainnet-beta, testnet, or devnet. Defaults to mainnet-beta.Decoding SessionsPhantom will decode and validate the session param on every request. To decode the session, we decode it with bs58, slice off the first 64 bytes of the signature, and the treat the rest as JSON data. We then sign the JSON data again with the same keypair and compare that signature against the signature in the session. If the signatures are the same, the session is valid. Otherwise, we conclude that the session has been faked, as the signature does not belong to the keypair it claims it does.Calling nacl.sign.open conveniently verifies and returns the original object. For more information, please review Encryption Resources.After we determine that the session is valid, we still need to ensure that the JSON fields line up with what we expect. An app could give a session for pubkey A when the user is currently using pubkey B in Phantom. In such a scenario, that session should not allow an app to request signatures. Instead, the app must issue a new connect request or use the correct session.// Encoding a sessionconst privateKey = ...;const sessionData = JSON.stringify({ ""app_id"": ""APP_ID"", ""chain"": ""CHAIN"", ""cluster"": ""CLUSTER"", ""timestamp"": 1644954984,});const bytes = Buffer.from(sessionData, ""utf-8"");​// tweetnacl-js formats signature in format <signature><sessionData>const signature = bs58.encode(nacl.sign(bytes, privateKey));​// Decoding ja sessionconst publicKey = ...;const verifiedSessionData = nacl.sign.open(bs58.decode(signature), publicKey.toBytes());if (!verifiedSessionData) throw new Error(`This session was not signed by ${publicKey}`);Invalid SessionsWhile sessions do not expire, there are a number of reasons why a sessions could still be deemed invalid:1.It was not signed by the current wallet keypair. This could mean that the session is entirely fake, or that it was signed by another keypair in the user’s wallet.2.It was signed by the current wallet keypair, but the session's JSON data does not pass muster. There are a few reasons why this might occur:1.The user switched chains (or possibly networks).2.The app_url could be blocked if malicious. See Blocklist for more information.​PreviousBrowseNext - Phantom DeeplinksSpecifying RedirectsLast modified 1yr agoCopy linkOn this pageSession StructureDecoding SessionsInvalid Sessions "
40,m.app phantom deeplinks handling sessions#invalid sessions,"m.app phantom deeplinks handling sessions#invalid sessions.   Handling Sessions - Phantom Developer Docs    Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API Reference⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookHandling SessionsWhen a user connects to Phantom for the first time, Phantom will return a session param that represents the user's connection. The app should pass this session param back to Phantom on all subsequent Provider Methods. It is the app's responsibility to store this session.Sessions do not expire. Once a user has connected with Phantom, the corresponding app can indefinitely make requests such as SignAndSendTransaction and SignMessage without prompting the user to re-connect with Phantom. Apps will still need to re-connect to Phantom after a Disconnect event or an Invalid Session.Session StructureThe entire session param is encoded in base58. A session should contain the following data:JSON Data Signature: A base58 signature of the JSON data that is 64 bytes. Phantom will check the signature against the actual message that was signed.JSON Data: A JSON object with the following fields:app_url (string): A url used to fetch app metadata (i.e. title, icon) using the same properties found in Displaying Your App.timestamp (number): The timestamp at which the user approved the connection. At the time of this writing, sessions do not expire.chain (string): The chain that the user connected to at the start of the session. Sessions cannot be used across two different chains with the same keypair (e.g. the user cannot connect to Solana and then sign on Ethereum). At the time of this writing, Phantom only supports solana.cluster (string) (optional): The approved cluster that the app and user initially connected to. Solana-only. Can be either: mainnet-beta, testnet, or devnet. Defaults to mainnet-beta.Decoding SessionsPhantom will decode and validate the session param on every request. To decode the session, we decode it with bs58, slice off the first 64 bytes of the signature, and the treat the rest as JSON data. We then sign the JSON data again with the same keypair and compare that signature against the signature in the session. If the signatures are the same, the session is valid. Otherwise, we conclude that the session has been faked, as the signature does not belong to the keypair it claims it does.Calling nacl.sign.open conveniently verifies and returns the original object. For more information, please review Encryption Resources.After we determine that the session is valid, we still need to ensure that the JSON fields line up with what we expect. An app could give a session for pubkey A when the user is currently using pubkey B in Phantom. In such a scenario, that session should not allow an app to request signatures. Instead, the app must issue a new connect request or use the correct session.// Encoding a sessionconst privateKey = ...;const sessionData = JSON.stringify({ ""app_id"": ""APP_ID"", ""chain"": ""CHAIN"", ""cluster"": ""CLUSTER"", ""timestamp"": 1644954984,});const bytes = Buffer.from(sessionData, ""utf-8"");​// tweetnacl-js formats signature in format <signature><sessionData>const signature = bs58.encode(nacl.sign(bytes, privateKey));​// Decoding ja sessionconst publicKey = ...;const verifiedSessionData = nacl.sign.open(bs58.decode(signature), publicKey.toBytes());if (!verifiedSessionData) throw new Error(`This session was not signed by ${publicKey}`);Invalid SessionsWhile sessions do not expire, there are a number of reasons why a sessions could still be deemed invalid:1.It was not signed by the current wallet keypair. This could mean that the session is entirely fake, or that it was signed by another keypair in the user’s wallet.2.It was signed by the current wallet keypair, but the session's JSON data does not pass muster. There are a few reasons why this might occur:1.The user switched chains (or possibly networks).2.The app_url could be blocked if malicious. See Blocklist for more information.​PreviousBrowseNext - Phantom DeeplinksSpecifying RedirectsLast modified 1yr agoCopy linkOn this pageSession StructureDecoding SessionsInvalid Sessions "
41,m.app library integrations web3 react v8,"m.app library integrations web3 react v8.   Web3-React (V8) - Phantom Developer Docs    Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API Reference⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookWeb3-React (V8)This tutorial is a step-by-step guide on how to integrate a wallet such as Phantom into your dApp using the Web3-React (v8) library. Web3-React is an EVM library that exposes hooks for common web3 primitives such as wallets, addresses, and the like.We will be going through step by step how to go from 0 to a fully integrated web3-react-powered Phantom connect button.PrerequisitesNode version >=16.12.0A text editor/IDE (such as VSCode)Some Knowledge of ReactYarn (v1)Creating The AppWe recommend using Vite to create new react applications.To create a new React application using Vite, run the following command in your terminal:yarn create vite1.This will ask you for a project name. Provide it a name here. For purposes of this tutorial I used ""Web3-React-V8-Sandbox"".2.It will then ask you to select a framework. Select ""React"" here.3.Next it will ask for a variant. Select ""Typescript"" here.Now change directory into your project and run:yarn installAnd make sure your app runs by running the command:yarn devConfiguring TypeScriptYou will need to change the moduleResolution keys to be switched from ""bundler"" to ""node"".Each file should look as follows.tsconfig.jsontsconfig.node.json{ ""compilerOptions"": { ""target"": ""ESNext"", ""lib"": [""DOM"", ""DOM.Iterable"", ""ESNext""], ""module"": ""ESNext"", ""skipLibCheck"": true,​ /* Bundler mode */ ""moduleResolution"": ""node"", ""allowSyntheticDefaultImports"": true, ""resolveJsonModule"": true, ""isolatedModules"": true, ""noEmit"": true, ""jsx"": ""react-jsx"",​ /* Linting */ ""strict"": true, ""noUnusedLocals"": true, ""noUnusedParameters"": true, ""noFallthroughCasesInSwitch"": true }, ""include"": [""src""], ""references"": [{ ""path"": ""./tsconfig.node.json"" }]}​{ ""compilerOptions"": { ""composite"": true, ""skipLibCheck"": true, ""module"": ""ESNext"", ""moduleResolution"": ""node"", ""allowSyntheticDefaultImports"": true }, ""include"": [""vite.config.ts""]}With that out of the way we can install all of our dependencies.Installing DependenciesTo install the appropriate packages, run the following:yarn add web3-react-phantom @web3-react/core eventemitter3 @web3-react/typesNow you can use the web3-react and web3-react-phantom packages in your project and integrate Phantom as a wallet in the app.Initializing The ConnectorWeb3-react is entirely based around the idea of connectors, and how it handles them. In a nutshell, you configure all of the wallets you'll need up front, and then web3-react works as a huge global state machine, that allows you to interact with any wallet anywhere in your application.To begin, create a file in the root of your directory called connectors.ts it should look like the following// connectors.tsimport { initializeConnector, Web3ReactHooks } from '@web3-react/core'import { Connector, Web3ReactStore } from '@web3-react/types'import { Phantom } from 'web3-react-phantom'​const phantom = initializeConnector<Phantom>((actions) => new Phantom({ actions }))​const connectors: [Connector, Web3ReactHooks, Web3ReactStore][] = [phantom]​export default connectorsHere you Initialize all of the connectors that you want in your app, and then you can pass them all to the connectors array, and export it for consumption in your app.Initializing Web3-ReactFirst we will need to import the packages into our project. At the top of the main.tsx file add these imports:// main.tsximport { Web3ReactProvider, Web3ReactHooks } from '@web3-react/core'import { Connector } from '@web3-react/types'​import allConnections from './connectors'Next, we will configure web3-react like so.import React from 'react'import ReactDOM from 'react-dom/client'import App from './App'import './index.css'import { Web3ReactProvider, Web3ReactHooks } from '@web3-react/core'import { Connector } from '@web3-react/types'​import allConnections from './connectors'​const connections: [Connector, Web3ReactHooks][] = allConnections.map(([connector, hooks]) => [connector, hooks])​ReactDOM.createRoot(document.getElementById('root') as HTMLElement).render( <Web3ReactProvider connectors={connections}> <React.StrictMode> <App /> </React.StrictMode> </Web3ReactProvider>)This will wrap our Vite app in this <Web3ReactProvider> JSX component which will give us global access to the hooks that we need to interact with Phantom.We also map through all of the arrays as the connector has 3 elements by default, and the <Web3ReactProvider> element only expects 2, so we want to pull the 3rd one out before passing it to the wrapper.We have everything we need done to add a connect wallet button to the app. But before we do, let's create a Card componentCard ComponentIn the root of your app you can create a folder called components and inside of that folder, create a file and name it Card.tsx//Card.tsximport { useEffect, useState } from 'react'import { Web3ReactSelectedHooks } from '@web3-react/core'import { Connector } from '@web3-react/types'​export default function Card({connector, hooks, name}: {connector: Connector, hooks: Web3ReactSelectedHooks, name: string}) { const {useSelectedAccount, useSelectedChainId, useSelectedIsActive, useSelectedIsActivating } = hooks const isActivating = useSelectedIsActivating(connector) const isActive = useSelectedIsActive(connector) const account = useSelectedAccount(connector) const chain = useSelectedChainId(connector)​ const [error, setError] = useState<Error | undefined>(undefined) const [connectionStatus, setConnectionStatus] = useState('Disconnected')​ const handleToggleConnect = () => { setError(undefined) // clear error state​ if (isActive) { if(connector?.deactivate) { void connector.deactivate() } else { void connector.resetState() } } else if (!isActivating) { setConnectionStatus('Connecting..')  Promise.resolve(connector.activate(1)) .catch((e) => {   connector.resetState() setError(e) }) } } useEffect(() => { if(isActive) { setConnectionStatus('Connected') } else { setConnectionStatus('Disconnected') } } ,[isActive])​ return ( <div> <p>{name.toUpperCase()}</p> <h3>Status - {(error?.message) ? (""Error: "" + error.message) : connectionStatus}</h3> <h3>Address - {account ? account : ""No Account Detected""}</h3> <h3>ChainId - {chain ? chain : 'No Chain Connected'}</h3> <button onClick={handleToggleConnect} disabled={false}> {isActive ? ""Disconnect"" : ""Connect""} </button> </div> )}While this may look a bit complicated, we can break it down a bit.What we will be passing the component are connector, hooks, and name props.We can run through what each of them is going to do.PropPurposeconnectorYou can think of this as the wallet itself. It will be directly responsible for connecting, disconnecting, and sending requests to the blockchain.hooksThese are an assortment of convenience hooks that will grab information about the wallet/connection that you are handling.nameThis is a string that we'll use to label the name of the connection to display in the UI.The rest of the component is calling the hooks to get the relevant status connection, address, and chain id. Then we add some state management to display whether or not the wallet is connected, disconnected, or in the process of connecting.Then we display all of the relevant information, and and show connect/disconnect buttons.Adding The Card To The AppAt the top of your App.tsx file you can import the Card component we just made and the useWeb3React hook that we will use to access the values we stored in the wrapper up in main.tsx.import { useWeb3React } from ""@web3-react/core"";import Card from ""./components/Card"";Next, you will call the useWeb3React hook at the top of your App componentfunction App() {const { connector, hooks } = useWeb3React(); // <-- This line //return ( ... )}Then delete the useState hook, it's import, and the button that increments it as we do not need the counter anymore.Then add the Card component and pass in the connector and hooks into it. Where the counter button used to be.<Card connector={connector} hooks={hooks} name='phantom' />Your entire App.tsx file should look like soimport reactLogo from ""./assets/react.svg"";import viteLogo from ""/vite.svg"";import ""./App.css"";import { useWeb3React } from ""@web3-react/core"";import Card from ""./components/Card"";​function App() { const { connector, hooks } = useWeb3React();​ return ( <> <div> <a href=""https://vitejs.dev"" target=""_blank""> <img src={viteLogo} className=""logo"" alt=""Vite logo"" /> </a> <a href=""https://react.dev"" target=""_blank""> <img src={reactLogo} className=""logo react"" alt=""React logo"" /> </a> </div> <h1>Vite + React</h1> <div className=""App""> <h1>Web3-React Connector Playbox</h1> <div className=""card""> <Card connector={connector} hooks={hooks} name='phantom' /> </div> </div> </> );}​export default App;Now when you run everything locally it should look like this!And then once you click the connect button, it will pop open phantom's connect screen. Once you hit approve all of your information should be displayed like soConclusionYou've now added your very own Phantom connect button using Web3-React!You can use this as the basis for your own dApp if you're looking to build out something, or use it for reference to add a Phantom connect button to your existing dApp. Either way, we hope you found this useful.Library Integrations - PreviousWeb3-OnboardNext - Developer PowertoolsPhantom BlocklistLast modified 21d agoCopy linkOn this pagePrerequisitesCreating The AppConfiguring TypeScriptInstalling DependenciesInitializing The ConnectorInitializing Web3-ReactCard ComponentAdding The Card To The AppConclusion "
42,m.app resources sandbox,"m.app resources sandbox.   Demo Applications - Phantom Developer Docs   Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API Reference⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookDemo ApplicationsMultichain SandboxFor a live example of how a multichain dApp can integrate with Phantom, check out our Multichain Sandbox on CodeSandbox and GitHub.The Phantom Multichain SandboxSolana-only SandboxFor a live example of a Solana-only integration, check out our Solana Sandbox on CodeSandbox and GitHub.The Phantom SandboxDeeplinking Demo AppFor a live demonstration of Phantom's deeplinking API, please review our React Native demo app on GitHub. This application can be run locally and interacted with on iOS and Android devices via Expo CLI. A connect request to Magic Eden, initiated via a deeplinkResources - PreviousFAQNext - ResourcesCommunity Guides & SDKsLast modified 2mo agoCopy linkOn this pageMultichain SandboxSolana-only SandboxDeeplinking Demo App "
43,m.app solana signing a message,"m.app solana signing a message.   Signing a Message - Phantom Developer Docs    Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API Reference⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookSigning a MessageWhen a web application is connected to Phantom, it can also request that the user signs a given message. Applications are free to write their own messages which will be displayed to users from within Phantom's signature prompt. Message signatures do not involve network fees and are a convenient way for apps to verify ownership of an address.In order to send a message for the user to sign, a web application must: 1.Provide a hex or UTF-8 encoded string as a Uint8Array.2.Request that the encoded message is signed via the user's Phantom wallet.The handleSignMessage section of our developer sandbox provides an example of signing a message.For more information on how to verify the signature of a message, please refer to tweetnacl-js.signMessage()request()const provider = getProvider(); // see ""Detecting the Provider""const message = `To avoid digital dognappers, sign below to authenticate with CryptoCorgis`;const encodedMessage = new TextEncoder().encode(message);const signedMessage = await provider.signMessage(encodedMessage, ""utf8"");const provider = getProvider(); // see ""Detecting the Provider""const message = `To avoid digital dognappers, sign below to authenticate with CryptoCorgis`;const encodedMessage = new TextEncoder().encode(message);const signedMessage = await provider.request({ method: ""signMessage"", params: { message: encodedMessage, display: ""hex"", },});Support for ""Sign In With"" StandardsApplications that rely on signMessage for authenticating users can choose to opt-in to one of the various Sign In With (SIW) standards. You can read more about them here.Solana - PreviousSending a Versioned TransactionNext - SolanaError Messages and CodesLast modified 2mo agoCopy link "
44,m.app ethereum and polygon sending a transaction,"m.app ethereum and polygon sending a transaction.   Sending a Transaction - Phantom Developer Docs    Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API Reference⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookSending a TransactionOnce a web application is connected to Phantom, it can prompt the user for permission to send transactions on their behalf.To send a transaction, you will need to have a valid transaction object. It should look a little like this:{ from: ""0xEA674fdDe714fd979de3EdF0F56AA9716B898ec8"", to: ""0xac03bb73b6a9e108530aff4df5077c2b3d481e5a"", gasLimit: ""21000"", maxFeePerGas: ""300"", maxPriorityFeePerGas: ""10"", nonce: ""0"", value: ""10000000000""}However, this transaction object needs to be signed using the sender's private key. This ensures that only the person that holds the private key can send transactions from the public address. To prompt Phantom to send a transaction to the network, refer to the following code snippetconst result = await provider.request({ method: 'eth_sendTransaction', params: [ { from: accounts[0], to: '0x0c54FcCd2e384b4BB6f2E405Bf5Cbc15a017AaFb', value: '0x0', gasLimit: '0x5028', gasPrice: '0x2540be400', type: '0x0', }, ],});This is the building blocks of what you will need to send a transaction. However, if you were to copy/paste this, it would likely fail. There are several pieces of a transaction that are best provided in a dynamic manner. Take a look at our sendTransaction function in our sandbox for reference.Ethereum & Polygon - PreviousEstablishing a ConnectionNext - Ethereum & PolygonSigning a MessageLast modified 6mo agoCopy link "
45,m.app developer powertools solana versioned transactions,"m.app developer powertools solana versioned transactions.   Solana Versioned Transactions - Phantom Developer Docs    Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API Reference⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookSolana Versioned TransactionsIntroductionPhantom supports Versioned Transactions as well as Legacy Transactions. Versioned Transactions and Address Lookup Tables (LUTs) were introduced by Solana in an effort to improve the developer and end-user experience. The proposed changes are as follows:1.Introduce a program which manages on-chain address lookup tables2.Add a new transaction format which can make use of the above on-chain address lookup tablesWhy do we need the above?Legacy transactions have a major issue: Maximum allowed size of 1232 bytes, and hence the number of accounts that can fit in an atomic transaction: 35 addresses.This is problematic as developers are limited with this threshold and are unable to include >35 signature-free account / program addresses in a single transaction. This is where Address Lookup Tables (LUT) come into the picture.​Address Lookup Tables (LUTs)The idea behind Address Lookup Tables is to store account addresses in array-like data structures on-chain. Once accounts are stored in this table, the address of the table can be referenced in a transaction message using 1-byte u8 indices.This opens up space as addresses need not be stored inside transaction messages, but only be referenced. This allows 2^8=256 accounts to be included in 1 tx, as accounts are referenced using u8 indices. Here's an example of its power:RPC ChangesTransaction responses will require a new version field: maxSupportedTransactionVersion to indicate to clients which transaction structure needs to be followed for deserialisation.The following methods need to be updated to avoid errors:getTransactiongetBlockThe following parameter needs to be added to the requests:maxSupportedTransactionVersion: 0If maxSupportedTransactionVersion is not explicitly added to the request, the transaction version will fallback to legacy. Any block that contains a versioned transaction will return with an error by the client in the case of a legacy transaction.You can set this via JSON formatted requests to the RPC endpoint like below:curl http://localhost:8899 -X POST -H ""Content-Type: application/json"" -d \'{""jsonrpc"": ""2.0"", ""id"":1, ""method"": ""getBlock"", ""params"": [430, { ""encoding"":""json"", ""maxSupportedTransactionVersion"":0, ""transactionDetails"":""full"", ""rewards"":false}]}'​You can also do the same using the @solana/web3.js library.// connect to the `devnet` cluster and get the current `slot`const connection = new web3.Connection(web3.clusterApiUrl(""devnet""));const slot = await connection.getSlot();​// get the latest block (allowing for v0 transactions)const block = await connection.getBlock(slot, { maxSupportedTransactionVersion: 0,});​// get a specific transaction (allowing for v0 transactions)const getTx = await connection.getTransaction( ""3jpoANiFeVGisWRY5UP648xRXs3iQasCHABPWRWnoEjeA93nc79WrnGgpgazjq4K9m8g2NJoyKoWBV1Kx5VmtwHQ"", { maxSupportedTransactionVersion: 0, },);​Check out how to build and send Versioned Transactions and Lookup Tables on this page.​Further ReadingVersioned Transactions | Solana DocsAddress Lookup Tables | Solana DocsVersioned TransactionsAnvit Mangal's BlogDeveloper Powertools - PreviousSolana Priority FeesNext - Developer PowertoolsWallet StandardLast modified 1mo agoCopy linkOn this pageIntroductionAddress Lookup Tables (LUTs)RPC ChangesFurther Reading "
46,m.app best practices displaying your app,"m.app best practices displaying your app.   Displaying Apps within Dialogs - Phantom Developer Docs   Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API Reference⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookDisplaying Apps within DialogsConnection and transaction approval dialog for mango.marketsWhen an app is Establishing a Connection or Sending a Transaction, Phantom will present the user with the above dialogs. In order to display the title and icon for these dialogs, Phantom will inspect the application's HTML for the following items:ValuePrimary LookupSecondary LookupFallbackTitle​Open Graph title​​Document Title Element​NoneIcon​Apple touch icon​​Favicon​A default icon​PreviousSupported Media TypesNext - ResourcesFAQLast modified 2mo agoCopy link "
47,m.app best practices tokens supported media types,"m.app best practices tokens supported media types.   Supported Media Types - Phantom Developer Docs   Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API Reference⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaFungiblesNFTs & Semi-FungiblesSupported Media TypesDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookSupported Media TypesSupported Media TypesPhantom supports a range of token media types, including images, audio files, video files, and 3d models. At this time, Phantom does not support HTML files. The following list includes all file types supported by Phantom:Images.jpeg.jpg.png.gif.svgVideo.mp4.mov.webm.m4v.ogv.oggAudio.mp3.wav.oga.flac3D Models.glb.gltf.gltf-binaryPreviousNFTs & Semi-FungiblesNext - Best PracticesDisplaying Apps within DialogsLast modified 3mo agoCopy link "
48,m.app best practices tokens home tab fungibles,"m.app best practices tokens home tab fungibles.   Fungibles - Phantom Developer Docs   Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API Reference⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaFungiblesNFTs & Semi-FungiblesSupported Media TypesDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookFungiblesDisplaying Fungible TokensPhantom prioritizes on-chain metadata that follows the Token Metadata Standard. For Fungible tokens specifically, Phantom will show the following fields:FieldDescriptionnameThe name of the token. (i.e. “USD Coin”)symbolThe symbol of the token. (i.e. ”USDC”)imageA URI pointing to the token's logo.If a Fungible token has name and symbol fields present on both its on-chain Metadata Account and off-chain JSON file (linked via the on-chain uri field), Phantom will prioritize the on-chain fields.If a Fungible token does not have an on-chain Metadata Account, Phantom will fallback to displaying data from the Solana Labs Token List. This list is considered deprecated and should not be used to host new tokens. When reading from the token list, Phantom will display the following fields:FieldDescriptionnameThe name of the token. (i.e. “USD Coin”)symbolThe symbol of the token. (i.e. ”USDC”)logoURIA URI pointing to the token's logo.extensions.coingeckoIDThe token ID as defined by the Coingecko API. Phantom uses this to fetch the price of the token.Best Practices - PreviousDisplaying Tokens on SolanaNextNFTs & Semi-FungiblesLast modified 2mo agoCopy link "
49,m.app best practices tokens collectibles nfts and semi fungibles,"m.app best practices tokens collectibles nfts and semi fungibles.   NFTs & Semi-Fungibles - Phantom Developer Docs   Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API Reference⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaFungiblesNFTs & Semi-FungiblesSupported Media TypesDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookNFTs & Semi-FungiblesOn Solana, NFTs are often thought of as SPL Tokens with 0 decimals and a supply of 1. According to the Token Metadata Standard, however, it is possible for a range of different tokens to have NFT-like characteristics. Phantom refers to all NFT-like tokens as collectibles and will display them separately from Fungible tokens that appear on the Home tab. Specifically, Phantom will display all FungibleAsset, NonFungible, NonFungibleEdition and ProgrammableNonFungible tokens on their own Collectibles tab.Grouping CollectiblesPhantom groups collectibles by their Certified Collections introduced in v1.1.0 of the Token Metadata Standard. In order to be grouped together, individual NFTs should all reference the same verified collection mint address. This mint address is itself home to an NFT with metadata that describes the collection (Example). Creators must ensure that this collection is verified on-chain (i.e. that verified is set to true).If no verified collection is found, Phantom will fallback to grouping NFTs by the first verified creator's address in the on-chain creators field. If two unverified items share the same creator address at the 0 index of their creators array, they will be grouped into the same collection.Naming Grouped CollectiblesWhen a group is created, a best-effort process is used to determine that group’s name. Phantom will look to these fields in the following order of preference:1.name of the verified on-chain collection NFT2.collection.name3.collection.family4.external_url (parsed to remove url parts)5.name (of a single collectible)6.symbol7.address of the first verified creator in the creators array (also used to group the collection)Displaying an Individual CollectibleWhen displaying the detail view of an individual collectible, Phantom will prioritize on-chain data in the Metadata Account over off-chain JSON linked via the uri field. This impacts both the name and symbol field which appears in both locations.Rendering Collectible MediaSupported Media TypesPhantom supports a wide-range of media types. For a full list, please refer to:Supported Media TypesSelecting MediaWhen determining what media to display for a given collectible, Phantom will search the off-chain JSON for data in the following order of preference:1.animation_url — Phantom will select the media source at the collectible's animation_url field.2.properties.files — If no animation_url is found, Phantom will choose the first file where the cdn property is set to true. Otherwise, a file will be chosen based on the media type in the following order of preference:1.image2.audio3.video4.vr or model3.image — Finally, if Phantom still cannot find media to display, it will fallback to the media source at the collectible's image field.Determining Media TypeIf a media source is found in properties.files, and that source is defined as an object, Phantom will determine the media type based on that file's type property. Under the Token Metadata Standard, file objects are defined with the following structure:FieldTypeDescriptiontypestringThe media type of the file. If selected, Phantom will use this to determine the media type (Example: ""image/png"").uristringThe uri source of the file (Example: https://asfh3uxyeoyvtkfqc7jagy3mhtsszhyubnc3wfss5ismdgtw.arweave.net/BIp90vgjs_VmosBfSA2NsPOUsnxQLRbsWUuo-kwZp2o?ext=png)cdnboolean (optional)An optional flag that dictates if the file is hosted on a cdn. If true, Phantom will select this file as the primary source file.In cases where Phantom cannot find a source from properties.files, it may fallback to a media source that is defined as a string (e.g. animation_url or image). In these cases, Phantom will look for data in the following order of preference:1.The media source uri’s ?ext= query string parameter (https://example.com/foo?ext=png)2.The media source uri’s pathname extension (https://example.com/foo.png)3.If the media source uri comes from the animation_url, Phantom will infer the media type based on the collectible's properties.category field.4.If the media source uri comes from the image field, Phantom will default to assume it is a png.If no supported media type can be determined, no media will be selected, and users may see a placeholder image instead.PreviousFungiblesNextSupported Media TypesLast modified 2mo agoCopy linkOn this pageGrouping CollectiblesNaming Grouped CollectiblesDisplaying an Individual CollectibleRendering Collectible Media "
50,m.app best practices displaying apps within the activity tab,"m.app best practices displaying apps within the activity tab.   Displaying Apps within the Activity Tab - Phantom Developer Docs   Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API Reference⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookDisplaying Apps within the Activity TabWhen a user views their historical activity, Phantom will parse their dApp interactions and enrich them with known metadata. The following are two examples of how Phantom displays historical transactions on Magic Eden and Jupiter, respectively:An example activity row for Magic EdenAn example activity row for JupiterTo enable this, dApp developers can send an email to [email protected] with the following information:1.URL of the Website2.Display name of the dApp3.Program/Contract IDs4.Interaction names (corresponding to program IDs)Developer Powertools - PreviousWallet StandardNext - Best PracticesDisplaying Tokens on SolanaLast modified 1mo agoCopy link "
51,m.app cdn cgi l email protection#6400011201080b1401161724140c050a100b094a051414,"m.app cdn cgi l email protection#6400011201080b1401161724140c050a100b094a051414.   Email Protection | Cloudflare    Please enable cookies. Email Protection You are unable to access this email address phantom.app  The website from which you got to this page is protected by Cloudflare. Email addresses on that page have been hidden in order to keep them from being accessed by malicious bots. You must enable Javascript in your browser in order to decode the e-mail address. If you have a website and are interested in protecting it in a similar way, you can sign up for Cloudflare.  How does Cloudflare protect email addresses on website from spammers? Can I sign up for Cloudflare?   Cloudflare Ray ID: 7cf8e88af801b074 •  Your IP:  Click to reveal 34.73.5.42 • Performance & security by Cloudflare   "
52,m.app ethereum and polygon detecting the provider,"m.app ethereum and polygon detecting the provider.   Detecting the Provider - Phantom Developer Docs   Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API Reference⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookDetecting the ProviderTo detect if a user has already installed Phantom, a web application should check for the existence of a phantom object. Phantom's browser extension and mobile in-app browser will both inject a phantom object into the window of any web application the user visits, provided that site is using https://, on localhost, or is 127.0.0.1. Phantom will not inject the provider into iframes or sites using http://.If a phantom object exists, Ethereum dApps can interact with Phantom via the API found at window.phantom.ethereum. This ethereum provider is also made available at window.ethereum but is prone to namespace collisions from other injected wallets.To detect if Phantom is installed, an application should check for an additional isPhantom flag.const isPhantomInstalled = window?.phantom?.ethereum?.isPhantomIf Phantom is not installed, we recommend you redirect your users to our website. Altogether, this may look like the following.window.phantomwindow.ethereumconst getProvider = () => { if ('phantom' in window) { const anyWindow: any = window; const provider = anyWindow.phantom?.ethereum; if (provider) { return provider; } }​ window.open('https://phantom.app/', '_blank');};const getProvider = () => { if ('ethereum' in window) { const anyWindow: any = window; const provider = anyWindow.ethereum; if (provider?.isPhantom) { return provider; } }​ window.open('https://phantom.app/', '_blank');};For an example of how a React application can detect Phantom, please refer to the getProvider function in our sandbox. Ethereum & Polygon - PreviousGetting Started with Ethereum and PolygonNext - Ethereum & PolygonEstablishing a ConnectionLast modified 1mo agoCopy link "
53,m.app solana detecting the provider,"m.app solana detecting the provider.   Detecting the Provider - Phantom Developer Docs   Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API Reference⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookDetecting the ProviderTo detect if a user has already installed Phantom, a web application should check for the existence of a phantom object. Phantom's browser extension and mobile in-app browser will both inject a phantom object into the window of any web application the user visits, provided that site is using https://, on localhost, or is 127.0.0.1. Phantom will not inject the provider into iframes or sites use http://.If a phantom object exists, Solana apps can interact with Phantom via the API found at window.phantom.solana. This solana object is also available at window.solana to support legacy integrations. To detect if Phantom is installed, an application should check for an additional isPhantom flag.const isPhantomInstalled = window.phantom?.solana?.isPhantomIf Phantom is not installed, we recommend you redirect your users to our website. Altogether, this may look like the following.const getProvider = () => { if ('phantom' in window) { const provider = window.phantom?.solana;​ if (provider?.isPhantom) { return provider; } }​ window.open('https://phantom.app/', '_blank');};For an example of how a React application can detect Phantom, please refer to the getProvider function in our sandbox. Solana - PreviousGetting Started With SolanaNext - SolanaEstablishing a ConnectionLast modified 10mo agoCopy link "
54,m.app library integrations dynamic,"m.app library integrations dynamic.   Dynamic - Phantom Developer Docs    Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API Reference⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookDynamic​​Dynamic is a powerful web3 auth developer platform that lets you integrate multiple wallets such as Phantom, Coinbase Wallet, MetaMask, and more into your app or website.Dynamic comes with Phantom built-in across both Solana, Ethereum, and Polygon. You can play around with a live demo of Dynamic here and see a full video walkthrough here. In this tutorial, we'll go through how to set up Dynamic with Phantom as the top wallet in the list of wallets.You can see a CodeSandbox of the example below here, and at the end of this guide your adapter will look like this:PrerequisitesDynamic works with React today. You can go through the standard getting started guide here.Dynamic is a multi-chain library, and Phantom is support on both EVM networks and Solana within the Dynamic adapter.Step 1: Create a Dynamic account1.​Sign up to get an environment ID2.Create an organization and a set up your first project3.Copy your environmentID from the Dynamic overview page4.(optional) Configure your site's CORS origins​Step 2: Install the Dynamic npm packageYou can install Dynamic's SDK with either yarn or npm. Dynamic currently supports React and NextJS.npm install @dynamic-labs/sdk-react# or yarn add @dynamic-labs/sdk-reactStep 3: Configure the SDKCopy the following snippet into your project and paste in your environmentId:import { DynamicContextProvider, DynamicWidget} from '@dynamic-labs/sdk-react';​const App = () => ( <DynamicContextProvider  settings={{ environmentId: 'Enter your Environment ID here' }}> <DynamicWidget /> </DynamicContextProvider>);​export default App;Step 4: Sort Phantom as the top walletNow that we have the basic Dynamic setup, we'll sort Phantom to top, define the first 4 wallets to show, and filter the rest of the wallets to only appear behind a search functionality.By passing phantomevm, we are specifying a button that connects to Phantom's EVM provider. To connect to Solana, we can pass phantom.import { DynamicContextProvider, DynamicWidget, SortWallets,defaultNumberOfWalletsToShow } from '@dynamic-labs/sdk-react';.... <DynamicContextProvider settings={{ ... walletsFilter: SortWallets(['phantomevm', 'metamask', 'walletconnect', 'coinbase']); defaultNumberOfWalletsToShow: 4; ... } }}> Step 5: Set Phantom as the recommended wallet for new to web3 usersIn addition to setting Phantom as the top wallet, you can also configure it to be the recommended wallet for users that click the Get your first wallet button. To do so, add the following snippet to your settings: <DynamicContextProvider settings={{ ... newToWeb3WalletChainMap: { primary_chain: ""evm"", wallets: { evm: ""phantomevm"", solana: ""phantom"" } } ... } }}> See it in actionNow that you put things together, you can see a CodeSandbox of the finished product here.Next stepsNow that you set up Dynamic, there are many additional things you can explore:Log in with your wallet, and see data in Dynamic's developer dashboard - Now that your widget is set up locally, try to log in with a wallet. As soon as you do, head over to the Dynamic developer dashboard and click on user management and analytics. You'll be able to see your user show up!Customize your SDK design - There are many ways to customize the Dynamic modal to fit your needs (you can explore them in the SDK configuration section), but to start, we suggest setting a light/dark mode and a primary color for the modal, which you can do in the design section of your developer dashboard.Explore how to use the Dynamic SDK - After your users connect their wallets, you'll want to interact with them for various reasons. You can read more about the SDK in Dynamic's docs.For support, you can also join Dynamic's Slack Community.Phantom Deeplinks - PreviousLimitationsNext - Library IntegrationsPrivyLast modified 25d agoCopy linkOn this pagePrerequisitesStep 1: Create a Dynamic accountStep 2: Install the Dynamic npm packageStep 3: Configure the SDKStep 4: Sort Phantom as the top walletStep 5: Set Phantom as the recommended wallet for new to web3 usersSee it in actionNext steps "
55,m.app library integrations web3 onboard,"m.app library integrations web3 onboard.   Web3-Onboard - Phantom Developer Docs    Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API Reference⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookWeb3-OnboardThis tutorial is a step-by-step guide on how to integrate a wallet such as Phantom into your dApp using the Web3-Onboard library. Web3-Onboard is an EVM wallet library that supports Phantom on Ethereum and Polygon.We will be going through step by step how to go from 0 to a fully integrated Web3-Onboard button. If you already have a dApp that you are trying to integrate Phantom in, you can use our project as reference. At the end of this guide, your adapter will look like this:The Web3-Onboard modal that shows after a user presses ""connect""PrerequisitesNode version >=16.12.0A text editor/IDE (such as VSCode)Some Knowledge of ReactCreating The AppWe recommend using Vite to create new react applications.To create a new React application using Vite, run the following command in your terminal:yarn create vite1.This will ask you for a project name. Provide it a name here. For purposes of this tutorial I used ""Web3-onboard-Sandbox"".2.It will then ask you to select a framework. Select ""React"" here.3.Next it will ask for a variant. Select ""Typescript"" here.Now change directory into your project and run:yarn installAnd make sure your app runs by running the command:yarn devBefore moving forward, we're going to configure Vite to recognize the window.ethereum object. Since we are in Typescript if we try to use window.ethereum without first doing this step, we will get a type error and be unable to compile our project.open the vite-env.d.ts file in the src directory.It should look like this:/// <reference types=""vite/client"" />All you need to do is extend the Window interface. To do so modify the vite-env.d.ts file to look like so:/// <reference types=""vite/client"" />​interface Window { ethereum: any;}Now whenever we reference window.ethereum, we will not encounter any type errors.With your app running, we can now move onto the Web3-Onboard specific pieces.Installing Web3-OnboardTo install the appropriate package, run the following:yarn add @web3-onboard/react @web3-onboard/phantomNow you can use the web3-onboard package in your project and integrate Phantom as a wallet in the modal.Initializing Web3-OnboardFirst we will need to import the packages into our project. At the top of the App.tsx file add these two lines:import { init, useConnectWallet } from ""@web3-onboard/react"";import phantomModule from ""@web3-onboard/phantom"";Next, we will can initialize the modal by calling the init hook. You can add this code to the project between your imports and your App component.const phantom = phantomModule();​init({ wallets: [phantom], chains: [ {  id: ""0x1"",  token: ""ETH"",  label: ""Ethereum Mainnet"",  rpcUrl: ""https://eth-mainnet.g.alchemy.com/v2/YOUR_API_KEY_HERE"", }, ]});Here you can see that we call the init hook that we imported, and provide the phantomModule to an array of wallets. Here you can also specify which chains your dapp supports.Each chain requires an id, token, label, and rpcUrl. Phantom currently supports Polygon, Ethereum Mainnet, Goerli, and Mumbai.You can add as many chains as you would like. There are many configuration options that Web3-Onboard provides you. To see a full list of the different options you can check out their documentation here. You can customize your theme, i18n options, app metadata, realtime app notifications, and more.With this bit of configuration out of the way we only need to add the button that will call the modal to the forefront of the screen to connect our wallet.Adding A Connect Wallet ButtonIn your App component, you will utilize the useConnectWallet hook that you imported earlier.Add this to the first line inside your component: const [{ wallet, connecting }, connect, disconnect] = useConnectWallet();This gives you the connect and disconnect functions that we will attach to our button, as well as the wallet and connecting keys in an object that allow us to track state of various wallets and connection statuses.We now have everything we need to add the actual UI. You can place this block in place of the basic counter that comes in the Vite starter.<button disabled={connecting} onClick={() => (wallet ? disconnect(wallet) : connect())}> {connecting ? 'connecting' : wallet ? 'disconnect' : 'connect'}</button>If you save your project you should now have working connect button that displays the Phantom wallet button. Clicking on it will establish a connection to the dapp.Here's what it will look like:The landing page of our applicationThe Web3-Onboard modal that shows after a user presses ""connect""ConclusionWeb3-Onboard provides quite a lot out of the gate with very little work on your end as a developer. We hope that you enjoyed this guide.If you got lost along the way do not worry. You can find the source code here to double check your work.Library Integrations - PreviouswagmiNext - Library IntegrationsWeb3-React (V8)Last modified 25d agoCopy linkOn this pagePrerequisitesCreating The AppInstalling Web3-OnboardInitializing Web3-OnboardAdding A Connect Wallet ButtonConclusion "
56,m.app resources faq,"m.app resources faq.   FAQ - Phantom Developer Docs   Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API Reference⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookFAQWhy can't I access Phantom on my website?Phantom will only inject its provider into websites that begin with https://, or if the host is localhost or 127.0.0.1. If your website only uses http://, Phantom will not inject its provider and you will not be able to access the methods found at window.phantom. Encrypting your web traffic and upgrading to https:// will restore functionality.Phantom will also not inject its provider into any iframe.Why isn't my token displaying properly?Phantom supports the Token Metadata Standard established by Metaplex. When displaying tokens, Phantom will first categorize them according to their TokenStandard. If a token is considered Fungible, Phantom will display it on the Home tab. Otherwise, Phantom will display it as a Collectible. For more information, please review:Displaying Tokens on SolanaWhat types of NFTs are supported?Phantom supports a range of NFT media types including images, audio files, video files, and 3D models. At this time, Phantom does not support HTML files. For a full list of the types of NFTs that Phantom will display, please reference:Supported Media TypesAre hardware wallets supported?Yes, Phantom currently supports Ledger and requires no special treatment on the application side.How does Phantom import wallet addresses?When importing addresses from an existing seed phrase, Phantom will scan for 20 addresses in each of our three supported derivation paths (bip44change, bip44, and a deprecated path), for a total of 60 addresses. For the convenience of the user, Phantom will filter this list of addresses down to wallets that have ever had signatures (i.e. have ever been used). Phantom will then sort this filtered list based on how many signatures each wallet has had plus the amount of lamports it currently owns. Why does Phantom prepend an additional instruction on standard SPL token transfers?When transferring SPL tokens, Phantom will first double check that the owner of the receiving token account is the address you expect to send to. To do this, Phantom calls a custom deployment of the Serum Assert Owner program. The program address of this deployment is DeJBGdMFa1uynnnKiwrVioatTuHmNLpyFKnmB5kaFdzQ and is available on Solana's Devnet, Testnet, and Mainnet.Best Practices - PreviousDisplaying Apps within DialogsNext - ResourcesDemo ApplicationsLast modified 2mo agoCopy linkOn this pageWhy can't I access Phantom on my website?Why isn't my token displaying properly?What types of NFTs are supported?Are hardware wallets supported?How does Phantom import wallet addresses?Why does Phantom prepend an additional instruction on standard SPL token transfers? "
57,m.app best practices tokens#categorizing tokens,"m.app best practices tokens#categorizing tokens.   Displaying Tokens on Solana - Phantom Developer Docs   Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API Reference⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaFungiblesNFTs & Semi-FungiblesSupported Media TypesDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookDisplaying Tokens on SolanaIf you've created a token on Solana using the SPL Token Program, then your token is compatible with Phantom. If Phantom users own a certain balance of an SPL token, that balance will always appear in their wallet. However, if Phantom cannot find more metadata about that token, it will display the token as ""Unknown"".Searching for MetadataWhen searching for metadata, Phantom will first look to the Token Metadata Program established by Metaplex. This program enhances ordinary SPL token mints with a Metadata Account that describes additional fields such as the token's symbol, image, and description. Some of these fields exist on-chain in the Metadata Account itself, while others exist off-chain in a JSON file that follows a standard format. The link to this off-chain JSON file is found at the Metadata Account's uri field.If a Metadata Account is found, Phantom will prioritize on-chain fields (e.g. name, symbol) before off-chain fields described in the uri JSON file.If a token does not have a Metadata Account, Phantom will fallback to reading metadata from the Solana Labs Token List. This token list is considered deprecated and should not be used to host new tokens.Categorizing TokensPhantom will categorize and display tokens based on their Token Standard. The tokenStandard field can be found in the token's on-chain Metadata Account and is used to describe a token's fungibility. The tokenStandard field has four options:Fungible: A token with simple metadata that can be freely mixed with others of the same mint. Common examples include USDC and SRM.FungibleAsset: A token with metadata that can also have NFT-like attributes. Commonly referred to as Semi-Fungible, these tokens are often used in gaming contexts to support stackable items like a piece of wood.NonFungible: A non-fungible token with a Master Edition account. This is the most popular type of NFT, encompassing well known collections like Solana Monkey Business and DeGods.NonFungibleEdition: A non-fungible token with an Edition account (printed from a Master Edition). This is a helpful feature for creators who want to offer multiple copies of their 1/1 NFTs.ProgrammableNonFungible: A new non-fungible asset class which allows for flexible configuration of various lifecycle rules triggered by specific actions. More info about Programmable NFTs or pNFTs can be found here.If no tokenStandard is set, Phantom will fallback to categorizing tokens based on the following logic:1.If the total mint supply is 1, Phantom will consider the token to be NonFungible.2.If the total mint supply is greater than 1 and the mint has 0 decimals, Phantom will consider the token to be a FungibleAsset.3.Phantom will consider all other tokens to be Fungible.Displaying TokensPhantom will display all Fungible tokens in the Home tab. For more information on Fungible token best practices, please see:FungiblesAll other token standards (FungibleAsset, NonFungible, and NonFungibleEdition) will be displayed in the Collectibles tab. For more information on collectible best practices, please refer to:NFTs & Semi-FungiblesBest Practices - PreviousDisplaying Apps within the Activity TabNextFungiblesLast modified 2mo agoCopy linkOn this pageSearching for MetadataCategorizing TokensDisplaying Tokens "
58,m.app ethereum and polygon provider api reference,"m.app ethereum and polygon provider api reference.   Provider API Reference - Phantom Developer Docs   Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API ReferencePropertiesEventsMethodsError Messages & Codes⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookProvider API ReferencePhantom's provider API is exposed to the user through the window.ethereum object that is injected into the browser. This same provider is made available at window.phantom.ethereum to prevent namespace collisions. This API is how a dApp will make requests to the user; reading account data, connecting to the website, signing messages, and sending transactions will all be done through this provider object. This provider API is specified in greater detail in EIP-1193. This area of the documentation will contain information about the API's properties, events, and methods.Ethereum & Polygon - PreviousSigning a MessageNextPropertiesLast modified 1mo agoCopy link "
59,m.app phantom deeplinks encryption,"m.app phantom deeplinks encryption.   Encryption - Phantom Developer Docs   Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API Reference⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookEncryptionDeeplinks are encrypted using symmetric key encryption generated from a Diffie-Hellman key exchange. While deeplink sessions will be created in plaintext, an encrypted channel will be created to prevent session tokens from getting hijacked.Encryption & Decryption WorkflowPhantom deeplinks are encrypted with the following workflows:Connect1.[dapp]: On the initial connect deeplink, dapps should include a dapp_encryption_public_key query parameter. It's recommended to create a new x25519 keypair for every session started with connect. In all methods, the public key for this keypair is referred to as dapp_encryption_public_key.2.[phantom]: Upon handling a connect deeplink, Phantom will also generate a new x25519 keypair.Phantom will return this public key as phantom_encryption_public_key in the connect response.Phantom will create a secret key using Diffie-Hellman with dapp_encryption_public_key and the private key associated with phantom_encryption_public_key.Phantom will locally store a mapping of dapp_encryption_public_key to shared secrets for use with decryption in subsequent deeplinks.3.[dapp]: Upon receiving the connect response, the dapp should create a shared secret by using Diffie-Hellman with phantom_encryption_public_key and the private key associated with dapp_encryption_public_key. This shared secret should then be used to decrypt the data field in the response. If done correctly, the user's public key will be available to share with the dapp inside the data JSON object.Subsequent Deeplinks1.[dapp]: For any subsequent methods (such as SignAndSendTransaction and SignMessage), dapps should send a dapp_encryption_public_key (the public key side of the shared secret) used with Phantom along with an encrypted payload object. 2.[phantom]: Upon approval, Phantom will encrypt the signed response as a JSON object with the encryption sent as a data= query param.3.[dapp]: Upon receiving the deeplink response, dapps should decrypt the object in the data= query param to view the signature.Encryption ResourcesTo learn more about encryption and decryption, please refer to the following libraries:JavaScript​TweetNaCl.js​iOS​TweetNaCl SwiftWrap​Android​Tink​​TweetNaCl Java​Phantom Deeplinks - PreviousSpecifying RedirectsNext - Phantom DeeplinksLimitationsLast modified 1yr agoCopy linkOn this pageEncryption & Decryption WorkflowEncryption Resources "
60,m.app ethereum and polygon establishing a connection,"m.app ethereum and polygon establishing a connection.   Establishing a Connection - Phantom Developer Docs    Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API Reference⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookEstablishing a ConnectionOnce an application has detected the provider, it can then request to connect to Phantom. This connection request will prompt the user for permission to share their public key, indicating that they are willing to interact further. Users must approve a connection request before the app can make additional requests such as signing a message or sending a transaction.Once permission is established for the first time, the web application's domain will be whitelisted for future connection requests. After a connection is established, it is possible to terminate the connection from both the application and the user side.ConnectingThe default way to connect to Phantom is by calling window.ethereum.request function.const provider = getProvider(); // see ""Detecting the Provider""try { const accounts = await provider.request({ method: ""eth_requestAccounts"" }); console.log(accounts[0]); // 0x534583cd8cE0ac1af4Ce01Ae4f294d52b4Cd305F} catch (err) { // { code: 4001, message: 'User rejected the request.' }}The eth_requestAccounts method will return a Promise. If it resolves, it is an array where the connected address is in the 0th index, and rejects (throw when awaited) when the user declines the request or closes the pop-up. See Errors for a breakdown of error messages Phantom may emit.When the user accepts the request to connect, the provider will also emit a connect event that contains the chainId of the network the user is connected to.provider.on(""connect"", (connectionInfo: { chainId: string }) => console.log(`Connected to chain: ${connectionInfo.chainId}`));Once the web application is connected to Phantom, it will be able to read the connected account's address and prompt the user for additional transactions. It also exposes a convenience isConnected boolean.console.log(provider.selectedAddress);// 0x534583cd8cE0ac1af4Ce01Ae4f294d52b4Cd305F console.log(provider.isConnected());// trueDisconnectingThere is no way to programmatically disconnect a user from their connection once they have established one. Once a user has established a connection, Phantom will add the website they opened a connection with to a list of ""trusted apps."" The user can then revoke access through the UI at any time, and will then need to reconnect. Phantom will attempt to reconnect to any application that is added to the users ""trusted apps"" automatically.Changing AccountsPhantom allows users to seamlessly manage multiple accounts (i.e. addresses) from within a single extension or mobile app. Whenever a user switches accounts, Phantom will emit an accountsChanged event.If a user changes accounts while already connected to an application, and the new account had already whitelisted that application, then the user will stay connected and Phantom will pass the public key of the new account:provider.on('accountsChanged', (publicKeys: String[]) => { if (publicKeys) { // Set new public key and continue as usual console.log(`Switched to account ${publicKeys[0]}`); } });If Phantom does not pass the public key of the new account, an application can either do nothing or attempt to reconnect:provider.on('accountsChanged', (publicKeys: String[]) => { if (publicKeys) { // Set new public key and continue as usual console.log(`Switched to account ${publicKeys[0].toBase58()}`); } else { // Attempt to reconnect to Phantom  provider.request({ method: ""eth_requestAccounts"" }).catch((error) => { // handle connection failure }); }});Ethereum & Polygon - PreviousDetecting the ProviderNext - Ethereum & PolygonSending a TransactionLast modified 3mo agoCopy linkOn this pageConnectingDisconnectingChanging Accounts "
61,m.app library integrations rainbowkit,"m.app library integrations rainbowkit.   RainbowKit - Phantom Developer Docs     Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API Reference⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookRainbowKitThis tutorial is a step-by-step guide on how to integrate a wallet such as Phantom into your dApp using the RainbowKit library. RainbowKit is an EVM wallet library that supports Phantom on Ethereum and Polygon.We will be going through step by step how to go from 0 to a fully integrated RainbowKit button. If you already have a dApp that you are trying to integrate Phantom in, you can use our project as reference. At the end of this guide, your adapter will look like this:PrerequisitesNode version >=16.12.0A text editor/IDE (such as VSCode)Some Knowledge of ReactCreating The AppWe recommend using Vite to create new react applications.To create a new React application using Vite, run the following command in your terminal:yarn create vite1.This will ask you for a project name. Provide it a name here. For purposes of this tutorial I used ""Rainbow-Sandbox"".2.It will then ask you to select a framework. Select ""React"" here.3.Next it will ask for a variant. Select ""Typescript"" here.Now change directory into your project and run:yarn installAnd make sure your app runs by running the command:yarn devConfiguring TypeScriptYou will need to change the moduleResolution keys to be switched from ""bundler"" to ""node"".Each file should look as follows.tsconfig.jsontsconfig.node.json{ ""compilerOptions"": { ""target"": ""ESNext"", ""lib"": [""DOM"", ""DOM.Iterable"", ""ESNext""], ""module"": ""ESNext"", ""skipLibCheck"": true,​ /* Bundler mode */ ""moduleResolution"": ""node"", ""resolveJsonModule"": true, ""isolatedModules"": true, ""noEmit"": true, ""allowSyntheticDefaultImports"": true, ""jsx"": ""react-jsx"",​ /* Linting */ ""strict"": true, ""noUnusedLocals"": true, ""noUnusedParameters"": true, ""noFallthroughCasesInSwitch"": true }, ""include"": [""src""], ""references"": [{ ""path"": ""./tsconfig.node.json"" }]}​{ ""compilerOptions"": { ""composite"": true, ""skipLibCheck"": true, ""module"": ""ESNext"", ""moduleResolution"": ""node"", ""allowSyntheticDefaultImports"": true }, ""include"": [""vite.config.ts""]}With that out of the way we can install all of our dependencies.Installing RainbowKitTo install the appropriate package, run the following:yarn add @rainbow-me/rainbowkit wagmi [email protected]^5Now you can use the RainbowKit package in your project and integrate Phantom as a wallet in the modal.Initializing RainbowKitFirst we will need to import the packages into our project. At the top of the main.tsx file add these imports:import '@rainbow-me/rainbowkit/styles.css';import { connectorsForWallets, RainbowKitProvider, darkTheme } from '@rainbow-me/rainbowkit';import { phantomWallet } from '@rainbow-me/rainbowkit/wallets';import { configureChains, createClient, goerli, WagmiConfig,} from 'wagmi';import { publicProvider } from 'wagmi/providers/public';Next, we will configure rainbowkit and wagmi like so.// =============================================================================// Rainbowkit Configuration// =============================================================================// initalize which chains your dapp will use, and set up a providerconst { chains, provider } = configureChains([goerli], [publicProvider()]);const connectors = connectorsForWallets([ { groupName: 'Phantom', wallets: [phantomWallet({ chains })], },]);​const wagmiClient = createClient({ connectors, provider,});Here we configure what chains we will support in our dApp, as well as the provider that wagmi requires to interface with the blockchain.Then we set up our connectors. This is all of the wallets that you want your dApp to support. You can have as many objects in the array as you would like, each categorized into different groups by the groupName and wallets keys.To see all of the different ways that you can configure your connection modal, you can go to RainbowKit's documentation.After that, we will pass the connectors and provider to the createClient function, which we will later use to wrap our app in a Wagmi Client and RainbowKitProvider.With this bit of prep done, we can now go to our app and add the providers as well as a connection button.Wrapping Your App With The ProvidersIn main.tsx wrap your <App />component with the providers. Your file should look like this with all of the configuration and wrapping completed.import React from 'react'import ReactDOM from 'react-dom/client'import App from './App'import './index.css'​import '@rainbow-me/rainbowkit/styles.css';import { connectorsForWallets, RainbowKitProvider, darkTheme } from '@rainbow-me/rainbowkit';import { phantomWallet } from '@rainbow-me/rainbowkit/wallets';import { configureChains, createClient, goerli, WagmiConfig,} from 'wagmi';import { publicProvider } from 'wagmi/providers/public';​​​// =============================================================================// Rainbowkit Configuration// =============================================================================// initalize which chains your dapp will use, and set up a providerconst { chains, provider } = configureChains([goerli], [publicProvider()]);const connectors = connectorsForWallets([ { groupName: 'Phantom', wallets: [phantomWallet({ chains })], },]);​const wagmiClient = createClient({ connectors, provider,});​ReactDOM.createRoot(document.getElementById('root') as HTMLElement).render( <React.StrictMode> <WagmiConfig client={wagmiClient}> <RainbowKitProvider chains={chains} theme={darkTheme()}> <App /> </RainbowKitProvider> </WagmiConfig> </React.StrictMode>,)Now we have everything we need done to add a connect wallet button to the app.Adding A Connect ButtonAt the top of your App.tsx file you can import the connect button from RainbowKit. import { ConnectButton } from '@rainbow-me/rainbowkit';Next, you can add this button in place of the counter button that is there by default.//REPLACE THIS<button onClick={() => setCount((count) => count + 1)}> count is {count}</button>// WITH THIS<ConnectButton /> Then delete the useState hook, and it's import as we don't need the counter anymore.// DELETE THISconst [count, setCount] = useState(0)// AND THISimport { useState } from 'react'Your entire App.tsx file should look like soimport reactLogo from './assets/react.svg'import viteLogo from '/vite.svg'import './App.css'import { ConnectButton } from '@rainbow-me/rainbowkit';​function App() { return ( <> <div> <a href=""https://vitejs.dev"" target=""_blank""> <img src={viteLogo} className=""logo"" alt=""Vite logo"" /> </a> <a href=""https://react.dev"" target=""_blank""> <img src={reactLogo} className=""logo react"" alt=""React logo"" /> </a> </div> <h1>Vite + React</h1> <div className=""card""> <ConnectButton /> <p>   Edit <code>src/App.tsx</code> and save to test HMR </p> </div> <p className=""read-the-docs"">  Click on the Vite and React logos to learn more </p> </> )}​export default AppNow when you run everything locally it should look like this!And then once you click the connect button, it will pop open a modal like the picture belowConclusionRainbowKit provides quite a lot out of the gate with very little work on your end as a developer.It also lets you leverage the wagmi library to it's fullest potential, as RainbowKit uses wagmi under the hood to manage all of the wallets. This allows you to use the other wagmi hooks to do things like sign messages, and send transactions. To see what a more advanced app might look like, you can look at the code for our sandbox for RainbowKit. And you can also check out the functionality here for a live demo.We hope that you enjoyed this guide!Library Integrations - PreviousPrivyNext - Library IntegrationswagmiLast modified 24d agoCopy linkOn this pagePrerequisitesCreating The AppConfiguring TypeScriptInstalling RainbowKitInitializing RainbowKitWrapping Your App With The ProvidersAdding A Connect ButtonConclusion "
62,m.app cdn cgi l email protection,"m.app cdn cgi l email protection.   Email Protection | Cloudflare    Please enable cookies. Email Protection You are unable to access this email address phantom.app  The website from which you got to this page is protected by Cloudflare. Email addresses on that page have been hidden in order to keep them from being accessed by malicious bots. You must enable Javascript in your browser in order to decode the e-mail address. If you have a website and are interested in protecting it in a similar way, you can sign up for Cloudflare.  How does Cloudflare protect email addresses on website from spammers? Can I sign up for Cloudflare?   Cloudflare Ray ID: 7cf8e8fdfad91381 •  Your IP:  Click to reveal 34.73.5.42 • Performance & security by Cloudflare   "
63,m.app ethereum and polygon getting started,"m.app ethereum and polygon getting started.   Getting Started with Ethereum and Polygon - Phantom Developer Docs   Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API Reference⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookGetting Started with Ethereum and PolygonThe Phantom browser extension and mobile in-app browser are both designed to interact with web applications. EVM web apps can interact with Phantom via the provider that is injected at window.phantom.ethereum. This provider conforms to the EIP-1193 standard and is also injected at window.ethereum to support legacy integrations.This documentation is dedicated to covering all aspects of the provider. For guidance on how to integrate Phantom into an EVM wallet adapter library, check out our following tutorials:​Dynamic​​Privy​​RainbowKIt​​wagmi​​Web3-Onboard​​Web3-React (V8)​Solana - PreviousError Messages and CodesNext - Ethereum & PolygonDetecting the ProviderLast modified 11d agoCopy link "
64,m.app phantom deeplinks provider methods,m.app phantom deeplinks provider methods.   Provider Methods - Phantom Developer Docs   Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API Reference⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsConnectDisconnectSignAndSendTransactionSignAllTransactionsSignTransactionSignMessageOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookProvider MethodsAll provider methods follow a protocol format of:https://phantom.app/ul/<version>/<method>The following provider methods are accessible via deeplinks:ConnectDisconnectSignAndSendTransactionSignAllTransactionsSignTransactionSignMessagePhantom Deeplinks - PreviousPhantom DeeplinksNextConnectLast modified 1yr agoCopy link 
65,m.app developer powertools solana priority fees,"m.app developer powertools solana priority fees.   Solana Priority Fees - Phantom Developer Docs   Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API Reference⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookSolana Priority FeesIntroductionPhantom automatically calculates and applies Priority Fees to all Phantom-generated transactions and dApp-generated transactions that meet our requirements.How Transaction Fees Work on SolanaSolana transactions fees are calculated based on two main parts:• A statically set base fee per signature, and• The computational resources used during the transaction, measured in Compute Units (CU)Since each transaction requires different computational resources, they are allotted a maximum number of compute units, known as the Compute Budget. After the Compute Budget is exhausted, the runtime halts the transaction and returns an error, resulting in a failed transaction.The maximum budget for a transaction is 1.4 million CU, while the total blockspace limit is 48 million CU. Only a few computationally heavy TXs, like a mint or a swap, could fill the entire block, halting other TXs—Hence the need for Priority Fees.The fee priority of a transaction T can be defined as F(T), where F(T) is the ""fee-per compute-unit"", calculated by:(additional_fee+base_fee) / requested_compute_units(additional\_fee + base\_fee)\ /\ requested\_compute\_units(additional_fee+base_fee) / requested_compute_unitsThis means that the more compute units a transaction requests, the more additional fee it will have to pay to maintain the priority in the transaction queue. This prevents computationally heavy transactions from being easily spammed or from filling blocks.Priority Fees CalculationPriority fees are calculated as,priority_fees = compute_budget ∗ compute_unit_pricepriority\_fees\ =\ compute\_budget\ *\ compute\_unit\_pricepriority_fees = compute_budget ∗ compute_unit_pricewhere,compute_budget = # of instructions ∗ compute_unit_limitcompute\_budget\ =\ \#\ of\ instructions\ *\ compute\_unit\_limitcompute_budget = # of instructions ∗ compute_unit_limitHow Phantom Applies Priority Fees to dApp TransactionsAlthough dApps can set their own priority fees on transactions they generate, we highly discourage doing so as it often surfaces unnecessary complexity to end-users. Instead, we recommend that dApp developers let Phantom apply priority fees on the user's behalf.Phantom will calculate and apply Priority Fees to all dApp-generated transactions, provided:• The transaction(s) do not already have signature(s) present• The transaction(s) do not have existing priority fee instructions (computeUnitBudget or computeUnitLimit)• After enhancing transaction(s) with Priority Fees, the size of each transaction will still be less than the byte size limit (1232 bytes)If all of the above conditions are met, Phantom will automatically calculate and apply priority fees at the time of signing. This pattern applies to all Phantom provider methods (signAndSendTransaction, signTransaction , signAllTransactions) across all environments (extension, mobile in-app browser, deeplinks, mobile wallet adapter).Further ReadingFee Transaction Priority | Solana DocsSolana Cookbook | Sending TransactionssolanacookbookRuntime | Solana DocsTransaction Fees | Solana DocsDeveloper Powertools - PreviousSign-In-With (SIW) StandardsNext - Developer PowertoolsSolana Versioned TransactionsLast modified 2mo agoCopy linkOn this pageIntroductionHow Transaction Fees Work on SolanaPriority Fees CalculationHow Phantom Applies Priority Fees to dApp TransactionsFurther Reading "
66,m.app developer powertools solana priority fees#how phantom applies priority fees to dapp transactions,"m.app developer powertools solana priority fees#how phantom applies priority fees to dapp transactions.   Solana Priority Fees - Phantom Developer Docs   Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API Reference⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookSolana Priority FeesIntroductionPhantom automatically calculates and applies Priority Fees to all Phantom-generated transactions and dApp-generated transactions that meet our requirements.How Transaction Fees Work on SolanaSolana transactions fees are calculated based on two main parts:• A statically set base fee per signature, and• The computational resources used during the transaction, measured in Compute Units (CU)Since each transaction requires different computational resources, they are allotted a maximum number of compute units, known as the Compute Budget. After the Compute Budget is exhausted, the runtime halts the transaction and returns an error, resulting in a failed transaction.The maximum budget for a transaction is 1.4 million CU, while the total blockspace limit is 48 million CU. Only a few computationally heavy TXs, like a mint or a swap, could fill the entire block, halting other TXs—Hence the need for Priority Fees.The fee priority of a transaction T can be defined as F(T), where F(T) is the ""fee-per compute-unit"", calculated by:(additional_fee+base_fee) / requested_compute_units(additional\_fee + base\_fee)\ /\ requested\_compute\_units(additional_fee+base_fee) / requested_compute_unitsThis means that the more compute units a transaction requests, the more additional fee it will have to pay to maintain the priority in the transaction queue. This prevents computationally heavy transactions from being easily spammed or from filling blocks.Priority Fees CalculationPriority fees are calculated as,priority_fees = compute_budget ∗ compute_unit_pricepriority\_fees\ =\ compute\_budget\ *\ compute\_unit\_pricepriority_fees = compute_budget ∗ compute_unit_pricewhere,compute_budget = # of instructions ∗ compute_unit_limitcompute\_budget\ =\ \#\ of\ instructions\ *\ compute\_unit\_limitcompute_budget = # of instructions ∗ compute_unit_limitHow Phantom Applies Priority Fees to dApp TransactionsAlthough dApps can set their own priority fees on transactions they generate, we highly discourage doing so as it often surfaces unnecessary complexity to end-users. Instead, we recommend that dApp developers let Phantom apply priority fees on the user's behalf.Phantom will calculate and apply Priority Fees to all dApp-generated transactions, provided:• The transaction(s) do not already have signature(s) present• The transaction(s) do not have existing priority fee instructions (computeUnitBudget or computeUnitLimit)• After enhancing transaction(s) with Priority Fees, the size of each transaction will still be less than the byte size limit (1232 bytes)If all of the above conditions are met, Phantom will automatically calculate and apply priority fees at the time of signing. This pattern applies to all Phantom provider methods (signAndSendTransaction, signTransaction , signAllTransactions) across all environments (extension, mobile in-app browser, deeplinks, mobile wallet adapter).Further ReadingFee Transaction Priority | Solana DocsSolana Cookbook | Sending TransactionssolanacookbookRuntime | Solana DocsTransaction Fees | Solana DocsDeveloper Powertools - PreviousSign-In-With (SIW) StandardsNext - Developer PowertoolsSolana Versioned TransactionsLast modified 2mo agoCopy linkOn this pageIntroductionHow Transaction Fees Work on SolanaPriority Fees CalculationHow Phantom Applies Priority Fees to dApp TransactionsFurther Reading "
67,m.app best practices tokens,"m.app best practices tokens.   Displaying Tokens on Solana - Phantom Developer Docs   Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API Reference⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaFungiblesNFTs & Semi-FungiblesSupported Media TypesDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookDisplaying Tokens on SolanaIf you've created a token on Solana using the SPL Token Program, then your token is compatible with Phantom. If Phantom users own a certain balance of an SPL token, that balance will always appear in their wallet. However, if Phantom cannot find more metadata about that token, it will display the token as ""Unknown"".Searching for MetadataWhen searching for metadata, Phantom will first look to the Token Metadata Program established by Metaplex. This program enhances ordinary SPL token mints with a Metadata Account that describes additional fields such as the token's symbol, image, and description. Some of these fields exist on-chain in the Metadata Account itself, while others exist off-chain in a JSON file that follows a standard format. The link to this off-chain JSON file is found at the Metadata Account's uri field.If a Metadata Account is found, Phantom will prioritize on-chain fields (e.g. name, symbol) before off-chain fields described in the uri JSON file.If a token does not have a Metadata Account, Phantom will fallback to reading metadata from the Solana Labs Token List. This token list is considered deprecated and should not be used to host new tokens.Categorizing TokensPhantom will categorize and display tokens based on their Token Standard. The tokenStandard field can be found in the token's on-chain Metadata Account and is used to describe a token's fungibility. The tokenStandard field has four options:Fungible: A token with simple metadata that can be freely mixed with others of the same mint. Common examples include USDC and SRM.FungibleAsset: A token with metadata that can also have NFT-like attributes. Commonly referred to as Semi-Fungible, these tokens are often used in gaming contexts to support stackable items like a piece of wood.NonFungible: A non-fungible token with a Master Edition account. This is the most popular type of NFT, encompassing well known collections like Solana Monkey Business and DeGods.NonFungibleEdition: A non-fungible token with an Edition account (printed from a Master Edition). This is a helpful feature for creators who want to offer multiple copies of their 1/1 NFTs.ProgrammableNonFungible: A new non-fungible asset class which allows for flexible configuration of various lifecycle rules triggered by specific actions. More info about Programmable NFTs or pNFTs can be found here.If no tokenStandard is set, Phantom will fallback to categorizing tokens based on the following logic:1.If the total mint supply is 1, Phantom will consider the token to be NonFungible.2.If the total mint supply is greater than 1 and the mint has 0 decimals, Phantom will consider the token to be a FungibleAsset.3.Phantom will consider all other tokens to be Fungible.Displaying TokensPhantom will display all Fungible tokens in the Home tab. For more information on Fungible token best practices, please see:FungiblesAll other token standards (FungibleAsset, NonFungible, and NonFungibleEdition) will be displayed in the Collectibles tab. For more information on collectible best practices, please refer to:NFTs & Semi-FungiblesBest Practices - PreviousDisplaying Apps within the Activity TabNextFungiblesLast modified 2mo agoCopy linkOn this pageSearching for MetadataCategorizing TokensDisplaying Tokens "
68,m.app,"m.app.   Introduction - Phantom Developer Docs   Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API Reference⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookIntroductionPhantom is a crypto wallet that can be used to manage digital assets and access decentralized applications on Solana, Polygon, and Ethereum. Phantom is currently available as:A browser extension​An iOS app​An Android app​At its core, Phantom works by creating and managing private keys on behalf of its users. These keys can then be used within Phantom to store funds and sign transactions. Developers can interact with Phantom via both web applications as well as iOS and Android applications.To interact with web applications, the Phantom extension and mobile in-app browser injects a phantom object into the javascript context of every site the user visits. A given web app may then interact with Phantom, and ask for the user's permission to perform transactions, through this injected provider.It's also possible to interact with the Phantom mobile app through universal links and deeplinks. With deeplinks, mobile apps can prompt their users to connect, sign, and send with Phantom directly. Once complete, Phantom will redirect users back to their referring applications.This documentation is intended for developers who are building applications with Phantom. If you are a developer looking for help with an integration, please check out our developer discord. For all other support requests, please visit our Help Center.​Next - IntroductionDeveloper SettingsLast modified 2mo agoCopy link "
69,m.app introduction readme,"m.app introduction readme.   Introduction - Phantom Developer Docs   Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API Reference⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookIntroductionPhantom is a crypto wallet that can be used to manage digital assets and access decentralized applications on Solana, Polygon, and Ethereum. Phantom is currently available as:A browser extension​An iOS app​An Android app​At its core, Phantom works by creating and managing private keys on behalf of its users. These keys can then be used within Phantom to store funds and sign transactions. Developers can interact with Phantom via both web applications as well as iOS and Android applications.To interact with web applications, the Phantom extension and mobile in-app browser injects a phantom object into the javascript context of every site the user visits. A given web app may then interact with Phantom, and ask for the user's permission to perform transactions, through this injected provider.It's also possible to interact with the Phantom mobile app through universal links and deeplinks. With deeplinks, mobile apps can prompt their users to connect, sign, and send with Phantom directly. Once complete, Phantom will redirect users back to their referring applications.This documentation is intended for developers who are building applications with Phantom. If you are a developer looking for help with an integration, please check out our developer discord. For all other support requests, please visit our Help Center.​Next - IntroductionDeveloper SettingsLast modified 2mo agoCopy link "
70,m.app developer powertools blocklist,"m.app developer powertools blocklist.   Phantom Blocklist - Phantom Developer Docs   Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API Reference⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookPhantom BlocklistPhantom hosts a community-maintained repository of malicious websites that target Solana users. If a user navigates to a site that has been deemed malicious, Phantom will redirect them to the Phantom Blocklist Page and and warn them of any suspicious connection requests. The list of these malicious sites is available on GitHub and is open to community contributions.The Phantom Blocklist PageLibrary Integrations - PreviousWeb3-React (V8)Next - Developer PowertoolsSign-In-With (SIW) StandardsLast modified 2mo agoCopy link "
71,m.app ethereum and polygon signing a message,"m.app ethereum and polygon signing a message.   Signing a Message - Phantom Developer Docs    Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API Reference⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookSigning a MessageWhen a web application is connected to Phantom, it can also request that the user signs a given message. Applications are free to write their own messages which will be displayed to users from within Phantom's signature prompt. Message signatures do not involve network fees and are a convenient way for apps to verify ownership of an address. You can see our handleSignMessage implementation to see how you can use libraries such as ethers.js to abstract away some of these intricacies const message = 'To avoid digital dognappers, sign below to authenticate with CryptoCorgis.';const from = accounts[0];const msg = `0x${Buffer.from(message, 'utf8').toString('hex')}`;const sign = await provider.request({ method: 'personal_sign', params: [msg, from, 'Example password'], });Support for ""Sign In With"" StandardsApplications that rely on signing messages to authenticate users can choose to opt-in to one of the various Sign In With (SIW) standards. You can read more about them here.Ethereum & Polygon - PreviousSending a TransactionNext - Ethereum & PolygonProvider API ReferenceLast modified 1mo agoCopy link "
72,m.app resources community guides and sdks,m.app resources community guides and sdks.   Community Guides & SDKs - Phantom Developer Docs   Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API Reference⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookCommunity Guides & SDKsThe following resources have been created by the Phantom developer community. These open source initiatives are free to use but are not actively maintained by Phantom.DeeplinkingiOS​PhantomConnect by Tokr Labs​Unity​Solana-Unity Deeplink Example React Native​Phantom Mobile Wallet Adapter by Phantasia Sports​Resources - PreviousDemo ApplicationsNext - ResourcesLogos & AssetsLast modified 10mo agoCopy link 
73,m.app resources assets,m.app resources assets.   Logos & Assets - Phantom Developer Docs   Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API Reference⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookLogos & AssetsA variety of Phantom logos and assets for your integration can be found here: https://phantom.app/logos.zip​Resources - PreviousCommunity Guides & SDKsLast modified 7mo agoCopy link 
74,m.app solana sending a transaction,"m.app solana sending a transaction.   Sending a Legacy Transaction - Phantom Developer Docs    Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API Reference⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookSending a Legacy TransactionOnce a web application is connected to Phantom, it can prompt the user for permission to send transactions on their behalf.In order to send a transaction, a web application must:1.Create an unsigned transaction.2.Have the transaction be signed and submitted to the network by the user's Phantom wallet.3.Optionally await network confirmation using a Solana JSON RPC connection.For more information about the nature of Solana transactions, please review the solana-web3.js docs as well as the Solana Cookbook.For a sample Phantom transaction, check out our developer sandbox.Signing and Sending a TransactionOnce a transaction is created, the web application may ask the user's Phantom wallet to sign and send the transaction. If accepted, Phantom will sign the transaction with the user's private key and submit it via a Solana JSON RPC connection. By far the easiest and most recommended way of doing this is by using the signAndSendTransaction method on the provider, but it is also possible to do with request. In both cases, the call will return a Promise for an object containing the signature.signAndSendTransaction()request()const provider = getProvider(); // see ""Detecting the Provider""const network = ""<NETWORK_URL>"";const connection = new Connection(network);const transaction = new Transaction();const { signature } = await provider.signAndSendTransaction(transaction);await connection.getSignatureStatus(signature);const provider = getProvider(); // see ""Detecting the Provider""const network = ""<NETWORK_URL>"";const connection = new Connection(network);const transaction = new Transaction();const { signature } = await provider.request({ method: ""signAndSendTransaction"", params: { message: bs58.encode(transaction.serializeMessage()), },});await connection.getSignatureStatus(signature);You can also specify a SendOptions object as a second argument into signAndSendTransaction or as an options parameter when using request.For a live demo of signAndSendTransaction, please refer to the handleSignAndSendTransaction section of our developer sandbox.Other Signing MethodsThe following methods are also supported, but are not recommended over signAndSendTransaction. It is safer for users, and a simpler API for developers, for Phantom to submit the transaction immediately after signing it instead of relying on the application to do so. If you use the methods below, Phantom will display a warning message to users.Signing a Transaction (Without Sending)Once a transaction is created, a web application may ask the user's Phantom wallet to sign the transaction without also submitting it to the network. The easiest and most recommended way of doing this is via the signTransaction method on the provider, but it is also possible to do via request. In both cases, the call will return a Promise for the signed transaction. After the transaction has been signed, an application may submit the transaction itself via web3js's sendRawTransaction.signTransaction()request()const provider = getProvider();const network = ""<NETWORK_URL>"";const connection = new Connection(network);const transaction = new Transaction();const signedTransaction = await provider.signTransaction(transaction);const signature = await connection.sendRawTransaction(signedTransaction.serialize());const provider = getProvider();const network = ""<NETWORK_URL>"";const connection = new Connection(network);const transaction = new Transaction();const signedTransaction = await provider.request({ method: ""signTransaction"", params: { message: bs58.encode(transaction.serializeMessage()), },});const signature = await connection.sendRawTransaction(signedTransaction.serialize());Please refer to the handleSignTransaction section of our developer sandbox for an example of signTransaction.Signing Multiple TransactionsIt is also possible to sign and send multiple transactions at once. This is exposed through the signAllTransactions method on the provider.signAllTransactions()request()const signedTransactions = await provider.signAllTransactions(transactions);const message = transactions.map(transaction => { return bs58.encode(transaction.serializeMessage());});const signedTransactions = await provider.request({ method: ""signAllTransactions"", params: { message },});For an example of signAllTransactions, please refer to the handleSignAllTransactions section of our developer sandbox.Solana - PreviousEstablishing a ConnectionNext - SolanaSending a Versioned TransactionLast modified 6mo agoCopy linkOn this pageSigning and Sending a TransactionOther Signing MethodsSigning a Transaction (Without Sending)Signing Multiple Transactions "
75,m.app developer powertools signing a message,"m.app developer powertools signing a message.   Sign-In-With (SIW) Standards - Phantom Developer Docs    Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API Reference⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookSign-In-With (SIW) StandardsApplications that rely on signMessage for authenticating users can choose to opt-in to one of the various Sign In With (SIW) standards. If a message follows one of the supported standards, Phantom will verify required fields at the time of signing. At the time of this writing, Phantom supports:Sign In With X (CAIP-122)Sign In With Ethereum (EIP-4361)Sign In With Solana (EIP-4361 with Solana address & chain-id grammar)The serialized format of SIW messages is as follows:${domain} wants you to sign in with your ${blockchain} account:${address}​${statement}​URI: ${uri}Version: ${version}Chain ID: ${chain-id}Nonce: ${nonce}Issued At: ${issued-at}Expiration Time: ${expiration-time}Not Before: ${not-before}Request ID: ${request-id}Resources:- ${resources[0]}- ${resources[1]}...- ${resources[n]}NameTypeRequired?DescriptiondomainstringThe authority that is requesting the signing.addressstringThe blockchain address that is performing the signing.statementstringA human-readable ASCII assertion that the user will sign. It MUST NOT contain .uristringA URI referring to the resource that is the subject of the signing (i.e. the subject of the claim).versionstringThe current version of the message.chain-idstringThe Chain ID to which the session is bound, and the network where Contract Accounts MUST be resolved.noncestringA randomized token to prevent signature replay attacks.issued-atstringThe issuance time.expiration-timestringThe time at which the signed authentication message is no longer valid.not-beforestringThe time at which the signed authentication message starts being valid.request-idstringA system-specific identifier used to uniquely refer to the authentication request.resourcesstring[]A list of uris the user wishes to have resolved as part of the authentication by the relying party.Sign In With XThe Sign In With X standard is defined by CAIP-122. It uses CAIP-10 identifiers for the address field and CAIP-2 for chain-id.While CAIP-122 is technically chain-agnostic, only Ethereum and Solana parsing are supported at this time.Ethereum ExamplesignMessage()request()const provider = getProvider(); // see ""Detecting the Provider""const message = `magiceden.io wants you to sign in with your Ethereum account:eip155:1:0xb9c5714089478a327f09197987f16f9e5d936e8a​Click Sign or Approve only means you have proved this wallet is owned by you.​URI: https://magiceden.ioVersion: 1Chain ID: eip155:1Nonce: bZQJ0SL6gJIssued At: 2022-10-25T16:52:02.748ZResources:- https://foo.com- https://bar.com`;const encodedMessage = new TextEncoder().encode(message);const signedMessage = await provider.signMessage(encodedMessage, ""utf8"");javaconst provider = getProvider(); // see ""Detecting the Provider""const message = `magiceden.io wants you to sign in with your Ethereum account:eip155:1:0xb9c5714089478a327f09197987f16f9e5d936e8a​Click Sign or Approve only means you have proved this wallet is owned by you.​URI: https://magiceden.ioVersion: 1Chain ID: eip155:1Nonce: bZQJ0SL6gJIssued At: 2022-10-25T16:52:02.748ZResources:- https://foo.com- https://bar.com`;const encodedMessage = new TextEncoder().encode(message);const signedMessage = await provider.request({ method: ""signMessage"", params: { message: encodedMessage, display: ""utf8"", });Solana ExamplesignMessage()request()const provider = getProvider(); // see ""Detecting the Provider""const message = `magiceden.io wants you to sign in with your Solana account:solana:mainnet:FYpB58cLw5cwiN763ayB2sFT8HLF2MRUBbbyRgHYiRpK​Click Sign or Approve only means you have proved this wallet is owned by you.​URI: https://magiceden.ioVersion: 1Chain ID: solana:mainnetNonce: bZQJ0SL6gJIssued At: 2022-10-25T16:52:02.748ZResources:- https://foo.com- https://bar.com`;const encodedMessage = new TextEncoder().encode(message);const signedMessage = await provider.signMessage(encodedMessage, ""utf8"");const provider = getProvider(); // see ""Detecting the Provider""const message = `magiceden.io wants you to sign in with your Solana account:solana:mainnet:FYpB58cLw5cwiN763ayB2sFT8HLF2MRUBbbyRgHYiRpK​Click Sign or Approve only means you have proved this wallet is owned by you.​URI: https://magiceden.ioVersion: 1Chain ID: solana:mainnetNonce: bZQJ0SL6gJIssued At: 2022-10-25T16:52:02.748ZResources:- https://foo.com- https://bar.com`;const encodedMessage = new TextEncoder().encode(message);const signedMessage = await provider.request({ method: ""signMessage"", params message: encodedMessage, display: ""utf8"", });Sign In With EthereumThe Sign In With Ethereum standard is defined by EIP-4361.ExamplesignMessage()request()const provider = getProvider(); // see ""Detecting the Provider""const message = `magiceden.io wants you to sign in with your Ethereum account:0xb9c5714089478a327f09197987f16f9e5d936e8a​Click Sign or Approve only means you have proved this wallet is owned by you.​URI: https://magiceden.ioVersion: 1Chain ID: 1Nonce: bZQJ0SL6gJIssued At: 2022-10-25T16:52:02.748ZResources:- https://foo.com- https://bar.com`;const encodedMessage = new TextEncoder().encode(message);const signedMessage = await provider.signMessage(encodedMessage, ""utf8"");const provider = getProvider(); // see ""Detecting the Provider""const message = `magiceden.io wants you to sign in with your Ethereum account:0xb9c5714089478a327f09197987f16f9e5d936e8a​Click Sign or Approve only means you have proved this wallet is owned by you.​URI: https://magiceden.ioVersion: 1Chain ID: 1Nonce: bZQJ0SL6gJIssued At: 2022-10-25T16:52:02.748ZResources:- https://foo.com- https://bar.com`;const encodedMessage = new TextEncoder().encode(message);const signedMessage = await provider.request({ method: ""signMessage"", params message: encodedMessage, display: ""utf8"", });Sign In With SolanaSign In With Solana is an informal extension of EIP-4361 with Solana address and chain-id grammar.ExamplesignMessage()request()const provider = getProvider(); // see ""Detecting the Provider""const message = `magiceden.io wants you to sign in with your Solana account:FYpB58cLw5cwiN763ayB2sFT8HLF2MRUBbbyRgHYiRpK​Click Sign or Approve only means you have proved this wallet is owned by you.​URI: https://magiceden.ioVersion: 1Chain ID: mainnetNonce: bZQJ0SL6gJIssued At: 2022-10-25T16:52:02.748ZResources:- https://foo.com- https://bar.com`;const encodedMessage = new TextEncoder().encode(message);const signedMessage = await provider.signMessage(encodedMessage, ""utf8"");const provider = getProvider(); // see ""Detecting the Provider""const message = `magiceden.io wants you to sign in with your Solana account:FYpB58cLw5cwiN763ayB2sFT8HLF2MRUBbbyRgHYiRpK​Click Sign or Approve only means you have proved this wallet is owned by you.​URI: https://magiceden.ioVersion: 1Chain ID: mainnetNonce: bZQJ0SL6gJIssued At: 2022-10-25T16:52:02.748ZResources:- https://foo.com- https://bar.com`;const encodedMessage = new TextEncoder().encode(message);const signedMessage = await provider.request({ method: ""signMessage"", params message: encodedMessage, display: ""utf8"", });Developer Powertools - PreviousPhantom BlocklistNext - Developer PowertoolsSolana Priority FeesLast modified 1mo agoCopy linkOn this pageSign In With XSign In With EthereumSign In With Solana "
76,m.app solana establishing a connection,"m.app solana establishing a connection.   Establishing a Connection - Phantom Developer Docs    Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch⌃KLinks👻IntroductionIntroductionDeveloper Settings🟢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codes🔷Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API Reference⛓Phantom DeeplinksPhantom DeeplinksProvider MethodsOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitations🤝Library IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)🛠Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard✅Best PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within Dialogs🙋ResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookEstablishing a ConnectionOnce an application has detected the provider, it can then request to connect to Phantom. This connection request will prompt the user for permission to share their public key, indicating that they are willing to interact further. Users must approve a connection request before the app can make additional requests such as signing a message or sending a transaction.Once permission is established for the first time, the web application's domain will be whitelisted for future connection requests. After a connection is established, it is possible to terminate the connection from both the application and the user side.ConnectingThe recommended and easiest way to connect to Phantom is by calling window.phantom.solana.connect(). However, the provider also exposes a request JSON RPC interface.connect()request()const provider = getProvider(); // see ""Detecting the Provider""try { const resp = await provider.connect(); console.log(resp.publicKey.toString()); // 26qv4GCcx98RihuK3c4T6ozB3J7L6VwCuFVc7Ta2A3Uo } catch (err) { // { code: 4001, message: 'User rejected the request.' }}const provider = getProvider(); // see ""Detecting the Provider""try { const resp = await provider.request({ method: ""connect"" }); console.log(resp.publicKey.toString()); // 26qv4GCcx98RihuK3c4T6ozB3J7L6VwCuFVc7Ta2A3Uo } catch (err) { // { code: 4001, message: 'User rejected the request.' }}The connect() call will return a Promise that resolves when the user accepts the connection request, and reject (throw when awaited) when the user declines the request or closes the pop-up. See Errors for a breakdown of error messages Phantom may emit.When the user accepts the request to connect, the provider will also emit a connect event.provider.on(""connect"", () => console.log(""connected!""));Once the web application is connected to Phantom, it will be able to read the connected account's public key and prompt the user for additional transactions. It also exposes a convenience isConnected boolean.console.log(provider.publicKey.toString());// 26qv4GCcx98RihuK3c4T6ozB3J7L6VwCuFVc7Ta2A3Uo console.log(provider.isConnected);// trueEagerly ConnectingAfter a web application connects to Phantom for the first time, it becomes trusted. Once trusted, it's possible for the application to automatically connect to Phantom on subsequent visits or page refreshes, without prompting the user for permission. This is referred to as ""eagerly connecting"".To implement this, applications should pass an onlyIfTrusted option into the connect() call.connect()request()provider.connect({ onlyIfTrusted: true });window.solana.request({ method: ""connect"", params: { onlyIfTrusted: true }});If this flag is present, Phantom will only eagerly connect and emit a connect event if the application is trusted. If the application is not trusted, Phantom will throw a 4001 error and remain disconnected until the user is prompted to connect without an onlyIfTrusted flag. In either case, Phantom will not open a pop-up window, making this convenient to use on all page loads.The following is an example of how a React application can eagerly connect to Phantom.import { useEffect } from ""react"";​useEffect(() => { // Will either automatically connect to Phantom, or do nothing. provider.connect({ onlyIfTrusted: true }) .then(({ publicKey }) => { // Handle successful eager connection }); .catch(() => { // Handle connection failure as usual })}, []);For a live demo, please refer to the handleConnect portion of our sandbox.If a wallet disconnects from a trusted app and then attempts to reconnect at a later time, Phantom will still eagerly connect. Once an app is trusted, Phantom will only require the user to approve a connection request if the user revokes the app from within their Trusted Apps settings.DisconnectingDisconnecting mirrors the same process as connecting. However, it is also possible for the wallet to initiate the disconnection, rather than the application itself.disconnect()request()provider.disconnect();provider.request({ method: ""disconnect"" });The following is an example of how a React application can gracefully handle a disconnect event.import { useState, useEffect } from ""react"";​const [pubKey, setPubKey] = useState(null);​useEffect(() => { // Store user's public key once they connect provider.on(""connect"", (publicKey) => { setPubKey(publicKey); });​ // Forget user's public key once they disconnect provider.on(""disconnect"", () => { setPubKey(null); });}, [provider]);Changing AccountsPhantom allows users to seamlessly manage multiple accounts (i.e. Keypairs) from within a single extension or mobile app. Whenever a user switches accounts, Phantom will emit an accountChanged event.If a user changes accounts while already connected to an application, and the new account had already whitelisted that application, then the user will stay connected and Phantom will pass the PublicKey of the new account:provider.on('accountChanged', (publicKey) => { if (publicKey) { // Set new public key and continue as usual  console.log(`Switched to account ${publicKey.toBase58()}`); } });If Phantom does not pass the public key of the new account, an application can either do nothing or attempt to reconnect:provider.on('accountChanged', (publicKey) => { if (publicKey) { // Set new public key and continue as usual  console.log(`Switched to account ${publicKey.toBase58()}`); } else { // Attempt to reconnect to Phantom  provider.connect().catch((error) => { // Handle connection failure }); }});Solana - PreviousDetecting the ProviderNext - SolanaSending a Legacy TransactionLast modified 2mo agoCopy linkOn this pageConnectingEagerly ConnectingDisconnectingChanging Accounts "
