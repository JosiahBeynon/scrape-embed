





Sign-In-With (SIW) Standards - Phantom Developer Docs













Phantom Developer DocsHomeDeveloper DiscordChangelogTwitterSearch‚åÉKLinksüëªIntroductionIntroductionDeveloper Settingsüü¢SolanaGetting Started With SolanaDetecting the ProviderEstablishing a ConnectionSending a Legacy TransactionSending a Versioned TransactionSigning a MessageError Messages and Codesüî∑Ethereum & PolygonGetting Started with Ethereum and PolygonDetecting the ProviderEstablishing a ConnectionSending a TransactionSigning a MessageProvider API Reference‚õìPhantom DeeplinksPhantom DeeplinksProvider MethodsOther MethodsHandling SessionsSpecifying RedirectsEncryptionLimitationsü§ùLibrary IntegrationsDynamicPrivyRainbowKitwagmiWeb3-OnboardWeb3-React (V8)üõ†Developer PowertoolsPhantom BlocklistSign-In-With (SIW) StandardsSolana Priority FeesSolana Versioned TransactionsWallet Standard‚úÖBest PracticesDisplaying Apps within the Activity TabDisplaying Tokens on SolanaDisplaying Apps within DialogsüôãResourcesFAQDemo ApplicationsCommunity Guides & SDKsLogos & AssetsPowered By GitBookSign-In-With (SIW) StandardsApplications that rely on signMessage for authenticating users can choose to opt-in to one of the various Sign In With (SIW) standards. If a message follows one of the supported standards, Phantom will verify required fields at the time of signing. At the time of this writing, Phantom supports:Sign In With X (CAIP-122)Sign In With Ethereum (EIP-4361)Sign In With Solana (EIP-4361 with Solana address & chain-id grammar)The serialized format of SIW messages is as follows:${domain} wants you to sign in with your ${blockchain} account:${address}‚Äã${statement}‚ÄãURI: ${uri}Version: ${version}Chain ID: ${chain-id}Nonce: ${nonce}Issued At: ${issued-at}Expiration Time: ${expiration-time}Not Before: ${not-before}Request ID: ${request-id}Resources:- ${resources[0]}- ${resources[1]}...- ${resources[n]}NameTypeRequired?DescriptiondomainstringThe authority that is requesting the signing.addressstringThe blockchain address that is performing the signing.statementstringA human-readable ASCII assertion that the user will sign. It MUST NOT contain \n.uristringA URI referring to the resource that is the subject of the signing (i.e. the subject of the claim).versionstringThe current version of the message.chain-idstringThe Chain ID to which the session is bound, and the network where Contract Accounts MUST be resolved.noncestringA randomized token to prevent signature replay attacks.issued-atstringThe issuance time.expiration-timestringThe time at which the signed authentication message is no longer valid.not-beforestringThe time at which the signed authentication message starts being valid.request-idstringA system-specific identifier used to uniquely refer to the authentication request.resourcesstring[]A list of uris the user wishes to have resolved as part of the authentication by the relying party.Sign In With XThe Sign In With X standard is defined by CAIP-122. It uses CAIP-10 identifiers for the address field and CAIP-2 for chain-id.While CAIP-122 is technically chain-agnostic, only Ethereum and Solana parsing are supported at this time.Ethereum ExamplesignMessage()request()const provider = getProvider(); // see "Detecting the Provider"const message = `magiceden.io wants you to sign in with your Ethereum account:eip155:1:0xb9c5714089478a327f09197987f16f9e5d936e8a‚ÄãClick Sign or Approve only means you have proved this wallet is owned by you.‚ÄãURI: https://magiceden.ioVersion: 1Chain ID: eip155:1Nonce: bZQJ0SL6gJIssued At: 2022-10-25T16:52:02.748ZResources:- https://foo.com- https://bar.com`;const encodedMessage = new TextEncoder().encode(message);const signedMessage = await provider.signMessage(encodedMessage, "utf8");javaconst provider = getProvider(); // see "Detecting the Provider"const message = `magiceden.io wants you to sign in with your Ethereum account:eip155:1:0xb9c5714089478a327f09197987f16f9e5d936e8a‚ÄãClick Sign or Approve only means you have proved this wallet is owned by you.‚ÄãURI: https://magiceden.ioVersion: 1Chain ID: eip155:1Nonce: bZQJ0SL6gJIssued At: 2022-10-25T16:52:02.748ZResources:- https://foo.com- https://bar.com`;const encodedMessage = new TextEncoder().encode(message);const signedMessage = await provider.request({ method: "signMessage", params: { message: encodedMessage, display: "utf8", });Solana ExamplesignMessage()request()const provider = getProvider(); // see "Detecting the Provider"const message = `magiceden.io wants you to sign in with your Solana account:solana:mainnet:FYpB58cLw5cwiN763ayB2sFT8HLF2MRUBbbyRgHYiRpK‚ÄãClick Sign or Approve only means you have proved this wallet is owned by you.‚ÄãURI: https://magiceden.ioVersion: 1Chain ID: solana:mainnetNonce: bZQJ0SL6gJIssued At: 2022-10-25T16:52:02.748ZResources:- https://foo.com- https://bar.com`;const encodedMessage = new TextEncoder().encode(message);const signedMessage = await provider.signMessage(encodedMessage, "utf8");const provider = getProvider(); // see "Detecting the Provider"const message = `magiceden.io wants you to sign in with your Solana account:solana:mainnet:FYpB58cLw5cwiN763ayB2sFT8HLF2MRUBbbyRgHYiRpK‚ÄãClick Sign or Approve only means you have proved this wallet is owned by you.‚ÄãURI: https://magiceden.ioVersion: 1Chain ID: solana:mainnetNonce: bZQJ0SL6gJIssued At: 2022-10-25T16:52:02.748ZResources:- https://foo.com- https://bar.com`;const encodedMessage = new TextEncoder().encode(message);const signedMessage = await provider.request({ method: "signMessage",    params message: encodedMessage, display: "utf8", });Sign In With EthereumThe Sign In With Ethereum standard is defined by EIP-4361.ExamplesignMessage()request()const provider = getProvider(); // see "Detecting the Provider"const message = `magiceden.io wants you to sign in with your Ethereum account:0xb9c5714089478a327f09197987f16f9e5d936e8a‚ÄãClick Sign or Approve only means you have proved this wallet is owned by you.‚ÄãURI: https://magiceden.ioVersion: 1Chain ID: 1Nonce: bZQJ0SL6gJIssued At: 2022-10-25T16:52:02.748ZResources:- https://foo.com- https://bar.com`;const encodedMessage = new TextEncoder().encode(message);const signedMessage = await provider.signMessage(encodedMessage, "utf8");const provider = getProvider(); // see "Detecting the Provider"const message = `magiceden.io wants you to sign in with your Ethereum account:0xb9c5714089478a327f09197987f16f9e5d936e8a‚ÄãClick Sign or Approve only means you have proved this wallet is owned by you.‚ÄãURI: https://magiceden.ioVersion: 1Chain ID: 1Nonce: bZQJ0SL6gJIssued At: 2022-10-25T16:52:02.748ZResources:- https://foo.com- https://bar.com`;const encodedMessage = new TextEncoder().encode(message);const signedMessage = await provider.request({ method: "signMessage",    params message: encodedMessage, display: "utf8", });Sign In With SolanaSign In With Solana is an informal extension of EIP-4361 with Solana address and chain-id grammar.ExamplesignMessage()request()const provider = getProvider(); // see "Detecting the Provider"const message = `magiceden.io wants you to sign in with your Solana account:FYpB58cLw5cwiN763ayB2sFT8HLF2MRUBbbyRgHYiRpK‚ÄãClick Sign or Approve only means you have proved this wallet is owned by you.‚ÄãURI: https://magiceden.ioVersion: 1Chain ID: mainnetNonce: bZQJ0SL6gJIssued At: 2022-10-25T16:52:02.748ZResources:- https://foo.com- https://bar.com`;const encodedMessage = new TextEncoder().encode(message);const signedMessage = await provider.signMessage(encodedMessage, "utf8");const provider = getProvider(); // see "Detecting the Provider"const message = `magiceden.io wants you to sign in with your Solana account:FYpB58cLw5cwiN763ayB2sFT8HLF2MRUBbbyRgHYiRpK‚ÄãClick Sign or Approve only means you have proved this wallet is owned by you.‚ÄãURI: https://magiceden.ioVersion: 1Chain ID: mainnetNonce: bZQJ0SL6gJIssued At: 2022-10-25T16:52:02.748ZResources:- https://foo.com- https://bar.com`;const encodedMessage = new TextEncoder().encode(message);const signedMessage = await provider.request({ method: "signMessage",    params message: encodedMessage, display: "utf8", });Developer Powertools - PreviousPhantom BlocklistNext - Developer PowertoolsSolana Priority FeesLast modified 1mo agoCopy linkOn this pageSign In With XSign In With EthereumSign In With Solana



